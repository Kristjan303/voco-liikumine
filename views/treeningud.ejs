<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="../css/index.css">
    <link rel="stylesheet" href="../css/treeningud.css">
    <title>Treeningud üèÉ‚Äç‚ôÄÔ∏è | VOCO Liikumine</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css">
</head>
<body>
<header>
    <div class="header-links">
        <a href="https://www.facebook.com/tartuvoco/">
            <i class="fa-brands fa-square-facebook fa-xl" style="color: #000000;"></i>
        </a>
        <a href="https://www.tiktok.com/@tartuvoco?lang=en">
            <i class="fa-brands fa-tiktok fa-xl" style="color: #000000;"></i>
        </a>
        <a href="https://www.instagram.com/tartuvoco/?hl=en">
            <i class="fa-brands fa-instagram fa-xl" style="color: #000000;"></i>
        </a>
    </div>
    <div class="header-search">
        <input type="text" placeholder="Otsi...">
        <button type="submit">
            <i class="fa-solid fa-search fa-lg" style="color: #000000;"></i>
        </button>
        <a id="siseneButton" class="sisene" href="/sisene">Sisene</a>
    </div>
</header>
<nav>
    <a href="/" class="nav-logo">
        <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
             x="0px" y="0px"
             viewBox="0 0 412.74 334.7" style="enable-background:new 0 0 412.74 334.7;" xml:space="preserve">
          <style type="text/css">
              .st0 {
                  fill: #FFFFFF;
              }
          </style>
            <path class="st0" d="M259.98,112.52c0,27.49-22.29,49.78-49.78,49.78c-27.49,0-49.78-22.29-49.78-49.78
              c0-27.49,22.29-49.78,49.78-49.78C237.69,62.74,259.98,85.02,259.98,112.52 M350.92,223.78c0-27.49-22.29-49.78-49.78-49.78
              s-49.78,22.29-49.78,49.78c0,27.49,22.29,49.78,49.78,49.78S350.92,251.27,350.92,223.78 M214.48,223.92l35.27-35.27
              c-9.01-9.05-21.49-14.65-35.27-14.65c-27.49,0-49.78,22.29-49.78,49.78s22.29,49.78,49.78,49.78c13.71,0,26.13-5.54,35.13-14.51
              L214.48,223.92z M60.31,67.73l52.2,90.51l52.2-90.51H60.31z"/>
        </svg>
    </a>
    <div class="nav-links">
        <a href="artiklid">Artiklid</a>
        <a href="uudised">Uudised</a>
        <a href="foorum">Foorum</a>
        <a style="color: #2980b9" href="treeningud">Treeningud</a>
        <a href="galerii">Galerii</a>
    </div>
</nav>

<section class="treening">
    <div class="section-nav">
        <div class="path">
            <p><a href="/">Avaleht</a> > <span>treeningud</span></p>
        </div>
        <h1>Treeningud</h1>
    </div>
    <div class="search-trenn">
    </div>
</section>

<section class="kalender">

    <% if (userRole === 2 || userRole === 3) { %>
        <form id="insert-form" onsubmit="submitForm(event)">

            <label for="training_name">Training name</label>
            <input type="text" id="training_name" name="training_name" required>

            <label for="training_description">Training description</label>
            <input type="text" id="training_description" name="training_description" required>

            <label for="training_day">Training day</label>
            <select id="training_day">
                <option value="Monday">Monday</option>
                <option value="Tuesday">Tuesday</option>
                <option value="Wednesday">Wednesday</option>
                <option value="Thursday">Thursday</option>
                <option value="Friday">Friday</option>
            </select>

            <label for="training_start-date">From:</label>
            <input type="time" id="training_start-date" name="training_start-date" step="60">

            <label for="training_end-date">To:</label>
            <input type="time" id="training_end-date" name="training_end-date" step="60">

            <label for="training_location">Location</label>
            <select id="training_location">
                <option value="Kopli">Kopli</option>
                <option value="P√µllu">P√µllu</option>
            </select>

            <button type="submit">Insert Record</button>

        </form>

    <% } %>

    <!-- Navigation buttons -->
    <div class="calender-nav">
        <button id="prev-week">Previous Week</button>
        <button id="next-week">Next Week</button>
    </div>

    <div class="calendar">
        <table>
            <tbody id="calendar-body">
            <!-- Calendar rows will be dynamically generated here -->
            </tbody>
        </table>
    </div>
        <script>
        // Define the navigation buttons
        const prevWeekBtn = document.getElementById("prev-week");
        const nextWeekBtn = document.getElementById("next-week");

        // Define the current week
        let currentWeek = 0;

        // Get the table body element
        const calendarBody = document.getElementById("calendar-body");

        // Define the working hours
        const workingHours = [
        "08:00", "09:00", "10:00", "11:00", "12:00",
        "13:00", "14:00", "15:00", "16:00", "17:00",
        "18:00", "19:00", "20:00", "21:00"
        ];

        // Function to create calendar rows and populate with training data
        function createCalendarRowsAndPopulate(weekOffset, trainingData) {
        // Clear existing rows
        calendarBody.innerHTML = "";

        const currentDate = new Date();
        currentDate.setDate(currentDate.getDate() + (weekOffset * 7));

        const monday = new Date(currentDate);
        monday.setDate(monday.getDate() - monday.getDay() + 1);

        // Create header row for dates
        const dateRow = document.createElement("tr");
        dateRow.innerHTML = "<td></td>";
        for (let i = 0; i < 5; i++) {
        const dateCell = document.createElement("td");
        const date = new Date(monday);
        date.setDate(date.getDate() + i);
        const options = { weekday: 'short', month: 'short', day: 'numeric', year: 'numeric' };
        dateCell.textContent = date.toLocaleDateString('EST', options);
        dateRow.appendChild(dateCell);
        }
        calendarBody.appendChild(dateRow);

        // Create rows for each hour
        workingHours.forEach(hour => {
        const row = document.createElement("tr");
        const timeCell = document.createElement("td");
        timeCell.textContent = hour;
        row.appendChild(timeCell);
        for (let i = 0; i < 5; i++) {
        const dayCell = document.createElement("td");
        row.appendChild(dayCell);
        }
        calendarBody.appendChild(row);
        });

        // Populate the calendar with training data
        trainingData.forEach(training => {
        const dayIndex = training.trainingDayNumber - 1;
        const startTime = training.trainingStartDate.slice(0, 5);
        const endTime = training.trainingEndDate.slice(0, 5);
        const startIndex = workingHours.indexOf(startTime);
        const endIndex = workingHours.indexOf(endTime);

        if (dayIndex >= 0 && dayIndex < 5 && startIndex !== -1 && endIndex !== -1) {
        for (let i = Math.max(0, startIndex); i <= Math.min(endIndex, workingHours.length - 1); i++) {
        const row = calendarBody.rows[i + 1];
        if (row) {
        const cell = row.cells[dayIndex + 1];
        if (cell) {
        cell.textContent += (cell.textContent ? '\n' : '') + training.trainingName + '\n' + training.trainingDescription;
        } else {
        console.error(`Cell at dayIndex ${dayIndex + 1} is undefined in row ${i + 1}`);
        }
        } else {
        console.error(`Row at index ${i + 1} is undefined`);
        }
        }
        }
        });
        }

        // Function to update the calendar for the current week
        function updateCalendar() {
        createCalendarRowsAndPopulate(currentWeek, []); // Pass an empty array initially
        }

        // Function to move to the previous week
        function goToPreviousWeek() {
        currentWeek--;
        updateCalendar();
        }

        // Function to move to the next week
        function goToNextWeek() {
        currentWeek++;
        updateCalendar();
        }

        // Event listeners for navigation buttons
        prevWeekBtn.addEventListener("click", goToPreviousWeek);
        nextWeekBtn.addEventListener("click", goToNextWeek);

        // Fetch data from the server and populate the calendar on page load
        fetch('/getTrainingData')
        .then(response => response.json())
        .then(data => {
        createCalendarRowsAndPopulate(currentWeek, data); // Populate with training data
        // updateCalendar(); // Update the calendar structure after data is available (not needed initially)
        })
        .catch(error => console.error('Error fetching data:', error));
        </script>

</section>


<div class="mapBanner">
    <a href="https://www.google.com/maps?ll=58.349455,26.714113&amp;z=15&amp;t=m&amp;hl=en-US&amp;gl=EG&amp;mapclient=embed&amp;q=Kopli+1+50115+Tartu+Estonia"
       target="_blank" class="mapBanner_col"
       style="background-image: url('https://liikumine.voco.ee/wp-content/uploads/sites/11/2023/01/map_1.jpg')">
        Kopli 1
    </a>
    <a href="https://www.google.com/maps/place/P%C3%B5llu+11,+50303+Tartu,+Estonia/@58.3994611,26.7119631,17.25z/data=!4m13!1m7!3m6!1s0x46eb36f49f59f7b1:0xc60a936ef314737f!2sP%C3%B5llu+11,+50303+Tartu,+Estonia"
       target="_blank" class="mapBanner_col"
       style="background-image: url('https://liikumine.voco.ee/wp-content/uploads/sites/11/2023/01/map_2.jpg')">
        P√µllu 11
    </a>
</div>

<footer class="footer">
    <div class="container container-footer">
        <div class="footer_content">
            <div class="footer_logoCol">
                <a href="https://liikumine.voco.ee/" class="footer_logo">
                    <img src="https://liikumine.voco.ee/wp-content/uploads/sites/11/2023/01/VOCO.svg"
                         alt="VOCO Liikumine" class="footer_logoImg">
                </a>
            </div>
            <div class="footer_mainCol">
                <div class="footer_grid">
                    <div class="footer_col">
                        <h3 class="footer_title">
                            Kontakt
                        </h3>
                        <div class="footer_text">
                            <p><a href="mailto:info@voco.ee">info@voco.ee</a></p>
                            <p>7 361 810</p>

                        </div>
                    </div>
                    <div class="footer_col">
                        <h3 class="footer_title">
                            VOCO
                        </h3>
                        <div class="footer_text">
                            <p>Kopli 1</p>
                            <p>Tartu 50115 Eesti</p>

                        </div>
                    </div>
                    <div class="footer_col">
                        <h3 class="footer_title">
                            Privaatsustingimused
                        </h3>
                        <div class="footer_text">
                            <p><a href="#">Andmekaitse</a></p>
                            <p><a href="#">K√ºpsised</a></p>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="footer_bottom">
        ¬© Tartu rakenduslik kolled≈æ 2024
    </div>
</footer>

</body>

<script>
    // submitForm.js
    function submitForm(event) {
        event.preventDefault();

        //get session data
        var sessionToken = sessionStorage.getItem('sessionToken');
        var userId = sessionStorage.getItem('userId');
        var email = sessionStorage.getItem('email');

        // Get the form data

        const trainingName = document.getElementById("training_name").value;
        const trainingDescription = document.getElementById("training_description").value;
        const trainingDay = document.getElementById("training_day").value;
        const trainingStartDate = document.getElementById("training_start-date").value;
        const trainingEndDate = document.getElementById("training_end-date").value;
        const trainingLocation = document.getElementById("training_location").value;

        //convert training day to number
        var trainingDayNumber = 0;
        if (trainingDay === "Monday") {
            trainingDayNumber = 1;
        } else if (trainingDay === "Tuesday") {
            trainingDayNumber = 2;
        } else if (trainingDay === "Wednesday") {
            trainingDayNumber = 3;
        } else if (trainingDay === "Thursday") {
            trainingDayNumber = 4;
        } else if (trainingDay === "Friday") {
            trainingDayNumber = 5;
        }

        // Validate the form data
        if (!trainingName || !trainingDescription || !trainingStartDate || !trainingEndDate || !trainingLocation) {
            alert("Please fill in all fields");
            document.getElementById('error-message-container').innerText = 'New article header or summernote content is empty';
            return;
        }

        // Send the form data to the server
        fetch('/submit-training', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                trainingName,
                trainingDescription,
                trainingDayNumber,
                trainingStartDate,
                trainingEndDate,
                trainingLocation,
                sessionToken,
                userId,
                email
            })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert("Record inserted successfully");
                } else {
                    alert("Error inserting record");
                }
            })
            .catch(error => console.error('Error inserting record:', error));
    }
</script>

<script>
    // checkLogin.js

    document.addEventListener("DOMContentLoaded", function () {
        const siseneButton = document.getElementById('siseneButton');

        // Check if the user is logged in by making a request to the server
        fetch('/test')
            .then(response => response.json())
            .then(data => {
                const isLoggedIn = data.session && data.session.user !== undefined && data.session.user !== null;

                // Update the button text based on the user's login status
                siseneButton.innerText = isLoggedIn ? 'V√§lju' : 'Sisene';

                // Add a click event listener to the button
                siseneButton.addEventListener('click', function () {
                    if (isLoggedIn) {
                        // If logged in, make a request to the server to log out
                        fetch('/logout')
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    // If logout successful, reload the page to reflect the changes
                                    location.reload();
                                } else {
                                    console.error('Error logging out:', data.message);
                                }
                            })
                            .catch(error => console.error('Error logging out:', error));
                    } else {
                        // Handle the logic for navigating to the login page or any other actions
                        // Redirect to the login page, for example:
                        localStorage.clear();
                        window.location.href = '/sisene';
                    }
                });
            })
            .catch(error => console.error('Error checking login status:', error));
    });

</script>

</html>

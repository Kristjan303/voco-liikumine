<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="../css/index.css">
    <link rel="stylesheet" href="../css/treeningud.css">
    <title>Treeningud üèÉ‚Äç‚ôÄÔ∏è | VOCO Liikumine</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css">
    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.10/index.global.min.js'></script>



    <% if (userRole === 2 || userRole === 3) { %>
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                var calendarEl = document.getElementById('broneeringCalendar');

                var calendar = new FullCalendar.Calendar(calendarEl, {
                    initialView: 'dayGridMonth',
                    height: 500,
                    aspectRatio: 0.5,
                    contentHeight: 500,

                    events: '/fetch-broneeringud', // Endpoint to fetch events
                    eventDidMount: function(info) {
                        // Manipulate event rendering if needed
                    },
                    // button text estonksi
                    buttonText: {
                        today: 'T√§na',
                        month: 'Kuu',
                        week: 'N√§dal',
                        day: 'P√§ev',
                        list: 'Nimekiri'
                    },
                });
                // render tha darn thing for the element id is broneeringCalendar
                // estonski
                calendar.setOption('locale', 'et');
                // initial day monaday
                calendar.setOption('firstDay', 1);
                calendar.render();
            });
        </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var calendarEl = document.getElementById('calendar');
            var calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                editable: false,
                allDaySlot: false,
                eventClassNames: 'trenni-hover',
                firstDay: 1,
                height: 500,
                slotMinTime: "08:00:00",
                slotMaxTime: "21:30:00",
                slotDuration: "00:15:00",
                slotLabelFormat: {
                    hour: 'numeric',
                    minute: '2-digit',
                    omitZeroMinute: false
                },
                aspectRatio: 1,
                contentHeight: 500,
                expandRows: true,
                handleWindowResize: true,

                // make buttons estonian
                buttonText: {
                    today: 'T√§na',
                    month: 'Kuu',
                    week: 'N√§dal',
                    day: 'P√§ev',
                    list: 'Nimekiri'
                },
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay'
                },
            });

            calendar.setOption('locale', 'et');

            // Fetch data from the endpoint
            // Retrieve data from sessionStorage
            const userId = sessionStorage.getItem('userId');
            const email = sessionStorage.getItem('email');
            const sessionToken = sessionStorage.getItem('sessionToken');

// Check if userId, email, and sessionToken exist
            if (userId && email && sessionToken) {
                // Send request to fetch user's trennid
                fetch(`/fetch-user-trennid?userId=${userId}&email=${email}&sessionToken=${sessionToken}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        // Process fetched data
                        data.forEach(event => {
                            // Convert days to numbers
                            const days = event.trenni_toimumise_p√§ev.split(',');
                            const daysInNumbers = days.map(day => {
                                switch(day.trim()) {
                                    case 'Monday':
                                        return 1;
                                    case 'Tuesday':
                                        return 2;
                                    case 'Wednesday':
                                        return 3;
                                    case 'Thursday':
                                        return 4;
                                    case 'Friday':
                                        return 5;
                                    case 'Saturday':
                                        return 6;
                                    case 'Sunday':
                                        return 0;
                                    default:
                                        return -1; // Invalid day
                                }
                            });

                            // Create FullCalendar events
                            daysInNumbers.forEach(day => {
                                const startDateTime = `${event.trenni_toimumise_p√§ev.substring(0, 10)}T${event.trenni_toimumise_algusaeg}:00`;
                                const endDateTime = `${event.trenni_toimumise_p√§ev.substring(0, 10)}T${event.trenni_toimumise_l√µppaeg}:00`;
                                calendar.addEvent({
                                    title: event.trenni_nimi,
                                    start: startDateTime,
                                    end: endDateTime,
                                    daysOfWeek: [day],
                                    startTime: event.trenni_toimumise_algusaeg,
                                    endTime: event.trenni_toimumise_l√µppaeg,
                                    color: event.trenni_v√§rv,
                                    description: event.trenni_selgitus,
                                    location: event.asukoht,
                                    startRecur: event.trenni_lisamise_kuup√§ev,

                                });
                            });
                        });
                        calendar.render();
                    })
                    .catch(error => console.error('Error fetching data:', error));
            } else {
                console.error('Invalid session data');
            }

        });
    </script>

    <% } %>


</head>
<body>
<header>
    <div class="header-links">
        <a href="https://www.facebook.com/tartuvoco/">
            <i class="fa-brands fa-square-facebook fa-xl" style="color: #000000;"></i>
        </a>
        <a href="https://www.tiktok.com/@tartuvoco?lang=en">
            <i class="fa-brands fa-tiktok fa-xl" style="color: #000000;"></i>
        </a>
        <a href="https://www.instagram.com/tartuvoco/?hl=en">
            <i class="fa-brands fa-instagram fa-xl" style="color: #000000;"></i>
        </a>
    </div>
    <div class="header-search">
        <input type="text" id="searchInput" placeholder="Otsi...">
        <button type="button" id="searchButton">
            <i class="fa-solid fa-search fa-lg" style="color: #000000;"></i>
        </button>
        <a id="siseneButton" class="sisene" href="/sisene">Sisene</a>
    </div>
    <script>
        document.getElementById("searchButton").addEventListener("click", function () {
            sendData();
        });

        document.getElementById("searchInput").addEventListener("keydown", function (event) {
            if (event.key === "Enter") {
                sendData();
            }
        });

        function sendData() {
            var userInput = document.getElementById("searchInput").value.trim();
            if (userInput.length > 3) {
                sendDataToServer(userInput);
            } else {
                alert("Please enter at least 4 characters before searching.");
            }
        }

        function sendDataToServer(input) {
            var xhr = new XMLHttpRequest();
            xhr.open("POST", "/search", true);
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        var response = JSON.parse(xhr.responseText);
                        if (response.success) {
                            var url = response.url;
                            var data = response.data; // Extract the data from the response
                            window.location.href = `${url}?data=${JSON.stringify(data)}`; // Pass data as query parameter
                        } else {
                            alert("Search failed. Please try again later.");
                        }
                    } else {
                        alert("Error: " + xhr.statusText);
                    }
                }
            };
            var data = JSON.stringify({ query: input });
            xhr.send(data);
        }
    </script>
</header>
<nav>
    <a href="/" class="nav-logo">
        <img style="height: 80px" src="/logos/voco-logo-04-3.png">

    </a>
    <div class="nav-links">
        <a href="artiklid">Artiklid</a>
        <a href="uudised">Uudised</a>
        <a href="foorum">Foorum</a>
        <a style="color: #2980b9" href="treeningud">Treeningud</a>
        <a href="galerii">Galerii</a>
        <a href="kontakt">Kontakt</a>
    </div>
</nav>

<section class="treening">
    <div class="section-nav">
        <div class="path">
            <p><a href="/">Avaleht</a> > <span>treeningud</span></p>
        </div>
        <h1>Treeningud</h1>

    </div>


    <% if (userRole === 2 || userRole === 3) { %>
    <h2 style="margin-right: auto">Minu trennid:</h2>
        <div id="calendar"></div>
    <h2 style="margin-right: auto">Broneeringud: </h2>
        <div id="broneeringCalendar"></div>
    <% } %>

    <% if (userRole === 1) { %>
        <h2 style="margin-right: auto">Minu trennikava:</h2>
        <div id="calendar"></div>
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                var calendarEl = document.getElementById('calendar');
                var calendar = new FullCalendar.Calendar(calendarEl, {
                    initialView: 'timeGridWeek',
                    editable: false,
                    height: 500,
                    allDaySlot: false,
                    eventClassNames: 'trenni-hover',
                    firstDay: 1,
                    slotMinTime: "08:00:00",
                    slotMaxTime: "21:30:00",
                    slotDuration: "00:15:00",
                    slotLabelFormat: {
                        hour: 'numeric',
                        minute: '2-digit',
                        omitZeroMinute: false
                    },
                    aspectRatio: 0.5,
                    contentHeight: 500,
                    expandRows: true,
                    handleWindowResize: true,
                    headerToolbar: {
                        left: 'prev,next today',
                        center: 'title',
                        right: 'timeGridWeek,timeGridDay'
                    },
                    // rewrite the inner html of buttons to Estonian
                    buttonText: {
                        today: 'T√§na',
                        month: 'Kuu',
                        week: 'N√§dal',
                        day: 'P√§ev',
                        list: 'Nimekiri'
                    },
                    // render description and location in the event and add checkbox to the event
                    eventContent: function(arg) {
                        const currentDate = new Date();
                        const currentYear = currentDate.getFullYear();
                        const currentMonth = (currentDate.getMonth() + 1).toString().padStart(2, '0');
                        const currentDay = currentDate.getDate().toString().padStart(2, '0');
                        const today = `${currentYear}-${currentMonth}-${currentDay}`;

                        const hasEventOnCurrentDay = arg.event.start.toISOString().slice(0, 10) === today;

                        let checkboxHTML = '';
                        if (hasEventOnCurrentDay) {
                            checkboxHTML = `<div class="osaleb"> Ei osale: <input type="checkbox" id="${arg.event.id}" name="trenn" value="${arg.event.title}" data-date="${arg.event.daysOfWeek}" ${localStorage.getItem(arg.event.id) === 'true' ? 'checked' : ''}> </div>`;
                        }

                        return {
                            html: `<b>${arg.timeText}</b> ${arg.event.title} <br> ${checkboxHTML} <br> <i style="bottom: 0; position: absolute">${arg.event.extendedProps.location2}</i>`
                        };
                    },
                });

                calendar.setOption('locale', 'et');

                // Retrieve data from sessionStorage
                const userId = sessionStorage.getItem('userId');
                const email = sessionStorage.getItem('email');
                const sessionToken = sessionStorage.getItem('sessionToken');

                // Check if userId, email, and sessionToken exist
                if (userId && email && sessionToken) {
                    // Send request to fetch user's trennid
                    fetch(`/fetch-student-trennid`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ email, sessionToken, userId })
                    })
                        .then(response => response.json())
                        .then(data => {
                            // Check if data is returned and if it's not an invalid session
                            if (data && data.data && data.data.length > 0) {
                                // Process fetched data and add events to the calendar
                                data.data.forEach(event => {
                                    // Convert days to numbers
                                    const days = event.trenni_toimumise_p√§ev.split(',');
                                    const daysInNumbers = days.map(day => {
                                        switch (day.trim()) {
                                            case 'Monday':
                                                return 1;
                                            case 'Tuesday':
                                                return 2;
                                            case 'Wednesday':
                                                return 3;
                                            case 'Thursday':
                                                return 4;
                                            case 'Friday':
                                                return 5;
                                            case 'Saturday':
                                                return 6;
                                            case 'Sunday':
                                                return 0;
                                            default:
                                                return -1; // Invalid day
                                        }
                                    });

                                    // Create FullCalendar events
                                    daysInNumbers.forEach(day => {
                                        calendar.addEvent({
                                            title: event.trenni_nimi,
                                            daysOfWeek: [day],
                                            startTime: event.trenni_toimumise_algusaeg,
                                            endTime: event.trenni_toimumise_l√µppaeg,
                                            color: event.trenni_v√§rv,
                                            description: event.trenni_selgitus,
                                            location: event.asukoht,
                                            location2: event.trenni_klass,
                                            id: event.trenni_id,
                                            startRecur: event.trenni_lisamise_kuup√§ev,
                                        });
                                    });
                                });
                                calendar.render(); // Render the calendar

                                // Check if any events are displayed
                                if (calendar.getEvents().length === 0) {
                                    // If no events are displayed, hide the h2 and calendar
                                    document.querySelector('h2').style.display = 'none';
                                    document.getElementById('registreeritud trennid').style.display = 'none';
                                    calendarEl.style.display = 'none';
                                }
                            } else {
                                // If no data or invalid session, hide the h2 and calendar
                                document.querySelector('h2').style.display = 'none';
                                document.getElementById('registreeritud trennid').style.display = 'none';
                                calendarEl.style.display = 'none';
                            }
                        })
                        .catch(error => console.error('Error fetching data:', error));

                } else {
                    console.error('Invalid session data');
                }
            });
        </script>

    <% } %>

    <% if (userRole === 2 || userRole === 3) { %>

        <section class="hold-filter">
            <button id="toggle-button"><i class="fa-regular fa-eye fa-lg"></i></button>
        </section>
    <% } %>

<% if (userRole === 2 || userRole === 3) { %>

        <section class="hold-teacher-calendar">
            <form id="trenniForm" class="hidden">
                <h2>Lisa trenn</h2>
                <div class="form-group">
                    <label class="nimi" for="eventTitle">Trenni nimi:</label>
                    <input type="text" id="eventTitle" class="form-control" placeholder="Korvpall" required>
                </div>
                <div>
                    <label class="nimi" for="eventDescription">Trenni kirjeldus:</label>
                    <textarea id="eventDescription" class="form-control" placeholder="M√§ngime korvpalli"  required></textarea>
                </div>
                <div class="form-group weekDays" >
                    <label class="nimi">Mis p√§evadel v√µiks toimuda:</label><br>
                    <input type="checkbox" id="monday" name="day" value="Monday">
                    <label for="monday">Esmasp√§ev</label><br>
                    <input type="checkbox" id="tuesday" name="day" value="Tuesday">
                    <label for="tuesday">Teisip√§ev</label><br>
                    <input type="checkbox" id="wednesday" name="day" value="Wednesday">
                    <label for="wednesday">Kolmap√§ev</label><br>
                    <input type="checkbox" id="thursday" name="day" value="Thursday">
                    <label for="thursday">Neljap√§ev</label><br>
                    <input type="checkbox" id="friday" name="day" value="Friday">
                    <label for="friday">Reede</label><br>
                    <input type="checkbox" id="saturday" name="day" value="Saturday">
                    <label for="saturday">Laup√§ev</label><br>
                    <input type="checkbox" id="sunday" name="day" value="Sunday">
                    <label for="sunday">P√ºhap√§ev</label><br>
                </div>

                <div class="form-group">
                    <label class="nimi" for="eventStartTime">Trenni algusaeg:</label>
                    <input type="time" id="eventStartTime" class="form-control" required>
                </div>
                <div class="form-group">
                    <label class="nimi" for="eventEndTime">Trenni l√µpuaeg:</label>
                    <input type="time" id="eventEndTime" class="form-control" required>
                </div>
                <div>
                    <label class="nimi">Trenni asukoht:</label><br>
                    <input type="radio" id="option1" name="location" value="kopli" class="form-control" required>
                    <label for="option1">Kopli 1a</label><br>
                    <input type="radio" id="option2" name="location" value="p√µllu" class="form-control" required>
                    <label for="option2">P√µllu 11</label><br>
                </div>

                <!-- Separate form groups for Kopli and P√µllu room selection -->
                <div id="kopliRoomGroup" style="display: none;">
                    <div class="form-group">
                        <label class="nimi">Kopli Trenni asukoht:</label><br>
                        <select id="kopliRoomSelection" class="form-control" required>
                            <option value="A032a - Kopli j√µusaal">A032a - Kopli j√µusaal</option>
                            <option value="A032b - Kopli Aeroobikasaal">A032b - Kopli Aeroobikasaal</option>
                            <option value="A160A/B - Kopli spordisaal">A160A/B - Kopli spordisaal</option>
                        </select>
                    </div>
                </div>

                <div id="p√µlluRoomGroup" style="display: none;">
                    <div class="form-group">
                        <label class="nimi">P√µllu Trenni asukoht:</label><br>
                        <select id="p√µlluRoomSelection" class="form-control" required>
                            <option value="A121 - P√µllu spordisaal">A121 - P√µllu spordisaal</option>
                            <option value="A227 - P√µllu spordisaal">A227 - P√µllu spordisaal</option>
                        </select>
                    </div>
                </div>
                <script>
                    document.addEventListener("DOMContentLoaded", function() {
                        var kopliRoomGroup = document.getElementById("kopliRoomGroup");
                        var p√µlluRoomGroup = document.getElementById("p√µlluRoomGroup");
                        var kopliRadio = document.getElementById("option1");
                        var p√µlluRadio = document.getElementById("option2");

                        // Function to show/hide room selection based on radio button selection
                        function toggleRoomSelection() {
                            if (kopliRadio.checked) {
                                kopliRoomGroup.style.display = "block";
                                p√µlluRoomGroup.style.display = "none";
                            } else if (p√µlluRadio.checked) {
                                kopliRoomGroup.style.display = "none";
                                p√µlluRoomGroup.style.display = "block";
                            } else {
                                kopliRoomGroup.style.display = "none";
                                p√µlluRoomGroup.style.display = "none";
                            }
                        }

                        // Event listener for radio button change
                        kopliRadio.addEventListener("change", toggleRoomSelection);
                        p√µlluRadio.addEventListener("change", toggleRoomSelection);
                    });
                </script>

                <div class="form-group">
                    <label class="nimi" for="eventColor">Trenni v√§rv:</label><br>
                    <select id="eventColor" class="form-control" required>
                        <option value="#ff4040" style="background-color:#ff4040;">Punane</option>
                        <option value="#70ff70" style="background-color:#70ff70;">Roheline</option>
                        <option value="#2980b9" style="background-color:#2980b9;">Sinine</option>
                        <option value="#ffd629" style="background-color:#ffd629;">Kollane</option>
                        <option value="#ff29db" style="background-color:#ff29db;">Lilla</option>
                        <option value="#afafaf" style="background-color:#afafaf;">Hall</option>
                        <option value="#228B22" style="background-color:#228B22;">Tumeroheline</option>
                        <option value="#FFC0CB" style="background-color:#FFC0CB;">Roosa</option>
                        <option value="#FFA500" style="background-color:#FFA500;">Oran≈æ</option>
                    </select>
                </div>

                <button type="button" id="addEventButton">Lisa trenn</button>
            </form>
            <form class="hidden" id="broneeringuForm">
<!--                inputs for broneeringu koht, broneerinug start time and end time, broneeringu -->
                <h2>Broneeri</h2>
                <div class="form-group">
                    <label class="nimi" for="broneeringuKoht">Broneeringu koht:</label>
                    <input type="text" id="broneeringuKoht" class="form-control" placeholder="Tennisev√§ljak" required>
                </div>
                <div class="form-group
                ">
                    <label class="nimi" for="broneeringuAlgusaeg">Broneeringu algusaeg:</label>
                    <input type="datetime-local"
                           id="broneeringuAlgusaeg" class="form-control" required>
                </div>
                <div class="form-group
                ">
                    <label class="nimi" for="broneeringuL√µpuaeg">Broneeringu l√µpuaeg:</label>
                    <input type="datetime-local"
                           id="broneeringuL√µpuaeg" class="form-control" required>
                </div>
                <button type="button" id="addBroneeringButton">Broneeri</button>

            </form>

            <div class="current-trenn">
                <h2>Halda trenne</h2>
                <div class="trenn-list">

                </div>
                <script>
                    // Retrieve userId, email, and sessionToken from sessionStorage
                    const userId = sessionStorage.getItem('userId');
                    const email = sessionStorage.getItem('email');
                    const sessionToken = sessionStorage.getItem('sessionToken');

                    // Check if userId, email, and sessionToken are present in sessionStorage
                    if (!userId || !email || !sessionToken) {
                        console.error('User information not found in sessionStorage.');
                    } else {
                        // Construct the fetch URL with userId, email, and sessionToken for the first endpoint
                        const fetchUrlTrennid = `/fetch-user-trennid?userId=${userId}&email=${email}&sessionToken=${sessionToken}`;

                        // Fetch user trennid data
                        fetch(fetchUrlTrennid)
                            .then(response => response.json())
                            .then(data => {
                                const trennList = document.querySelector('.trenn-list');

                                // Check if data is received successfully
                                if (data && data.length > 0) {
                                    // Iterate over the fetched data and create HTML elements to display it
                                    data.forEach(trenni => {
                                        const trenniElement = document.createElement('div');
                                        trenniElement.classList.add('trenni');

                                        const startTime = trenni.trenni_toimumise_algusaeg.slice(0, 5);
                                        const endTime = trenni.trenni_toimumise_l√µppaeg.slice(0, 5);
                                        const translatedDays = trenni.trenni_toimumise_p√§ev.replace(/Monday/g, 'Esmasp√§ev').replace(/Tuesday/g, 'Teisip√§ev').replace(/Wednesday/g, 'Kolmap√§ev').replace(/Thursday/g, 'Neljap√§ev').replace(/Friday/g, 'Reede').replace(/Saturday/g, 'Laup√§ev').replace(/Sunday/g, 'P√ºhap√§ev');
                                        trenniElement.style.background = `linear-gradient(90deg, ${trenni.trenni_v√§rv} 0%, ghostwhite 2%)`;

                                        trenniElement.innerHTML = `
            <div class="trenni-header">
                <h4>${trenni.trenni_nimi}</h4>
                <p>${startTime} - ${endTime}</p>
            </div>
            <p style="color: #6b6b6b">${trenni.trenni_selgitus}</p>
            <p>Toimumis p√§evad: ${translatedDays}</p>
            <p class="trenni-asukoht"> ${trenni.asukoht} | ${trenni.trenni_klass}</p>
            <div class="trenni-footer">
            <p class="kasutaja-id"></p>
<button class="popup-button" data-id="${trenni.trenni_id}" data-color="${trenni.trenni_v√§rv}"><i class="fa-solid fa-ellipsis-vertical fa-lg"></i></button>
</div>

                            `;
                                        trennList.appendChild(trenniElement);

                                        // Fetch additional data from the second endpoint and append it under each .trenni div
                                        const fetchUrlKaijad = '/fetch-trennis-kaijad';
                                        const requestData = {
                                            sessionToken: sessionToken,
                                            email: email,
                                            trenniId: trenni.trenni_id,
                                            userId: userId
                                        };

                                        fetch(fetchUrlKaijad, {
                                            method: 'POST',
                                            headers: {
                                                'Content-Type': 'application/json'
                                            },
                                            body: JSON.stringify(requestData)
                                        })
                                            .then(response => response.json())
                                            .then(kaijadData => {
                                                const kasutajaIdElement = trenniElement.querySelector('.kasutaja-id');
                                                const trenniKaijadCount = kaijadData.length;

                                                if (trenniKaijadCount > 0) {
                                                    kasutajaIdElement.textContent = `Registreeritud kasutajaid: ${trenniKaijadCount}`;
                                                    kasutajaIdElement.style.color = `${trenni.trenni_v√§rv}`;
                                                } else {
                                                    kasutajaIdElement.textContent = 'Keegi pole registreerinud.';
                                                }
                                            })
                                            .catch(error => console.error('Error fetching trennis kaijad:', error));
                                    });
                                } else {
                                    // Display a message if no data is found
                                    trennList.innerHTML = '<p>No trennid found.</p>';
                                }
                            })
                            .catch(error => console.error('Error fetching user trennid:', error));
                    }



                </script>

                <div class="overlay2" id="overlay">
                    <div class="popup2">
                        <button class="close-button" id="closeButton"><i class="fa-solid fa-xmark fa-xl"></i></button>
                        <h2>Registreerinud kasutajad:</h2>
                        <div id="popupContentReg"></div>
                        <h2>Tulevases trennis osalejad:</h2>
                        <div id="popupContentOsalejad"></div>

                        <div class="hold-trenni-edits">

                            <div class="hold-trenni-delete">
                                <p>Kustuta: </p>
                                <button class="delete-trenn" id="deleteTrenniButton"><i class="fa-solid fa-trash-can fa-lg"></i></button>
                            </div>
                        </div>
                    </div>
                </div>

                <script>
                    document.addEventListener('DOMContentLoaded', function () {
                        const overlay = document.getElementById('overlay');
                        const closeButton = document.getElementById('closeButton');
                        const popupContentReg = document.getElementById('popupContentReg');
                        const popupContentOsalejad = document.getElementById('popupContentOsalejad');
                        const popup2 = document.querySelector('.popup2');
                        const deleteButton = document.getElementById('deleteTrenniButton');
                        const editButton = document.getElementById('editTrenniButton');





                        document.querySelector('.trenn-list').addEventListener('click', function(event) {
                            const button = event.target.closest('.popup-button');
                            if(button) {
                                const trenniId = button.getAttribute('data-id');
                                fetchTrennisData(trenniId);
                                overlay.style.display = 'block';
                                document.body.classList.add('popup-open');
                                // Set the color of the popup to the color of the trenni
                                popup2.style.background = `linear-gradient(45deg, rgba(255,255,255,1) 90%, ${button.getAttribute('data-color')}80 100%`;
                                // Set the trenniId to the delete button
                                deleteButton.setAttribute('data-id', trenniId);
                                // Set the trenniId to the edit button
                                editButton.setAttribute('data-id', trenniId);
                            }
                        });

                        closeButton.addEventListener('click', function () {
                            overlay.style.display = 'none';
                            document.body.classList.remove('popup-open');
                        });

                        function fetchTrennisData(trenniId) {
                            const sessionToken = sessionStorage.getItem('sessionToken');
                            const email = sessionStorage.getItem('email');
                            const userId = sessionStorage.getItem('userId');

                            console.log(trenniId, sessionToken, email, userId);

                            fetch('/fetch-trennis-kaijad', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    sessionToken: sessionToken,
                                    email: email,
                                    trenniId: trenniId,
                                    userId: userId

                                })
                            })
                                .then(response => {
                                    if (!response.ok) {
                                        throw new Error('Network response was not ok');
                                    }
                                    return response.json();
                                })
                                .then(data => {
                                    // Render fetched data
                                    renderData(data);
                                })
                                .catch(error => {
                                    console.error('Error fetching data:', error);
                                });
                        }

                        deleteButton.addEventListener('click', function () {
                            const confirmation = confirm("Kas olete kindel, et soovite trenni kustutada?");
                            if (confirmation) {
                                const trenniId = deleteButton.getAttribute('data-id');
                                const sessionToken = sessionStorage.getItem('sessionToken');
                                const email = sessionStorage.getItem('email');
                                const userId = sessionStorage.getItem('userId');

                                console.log(trenniId);

                                fetch('/delete-trenn', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        sessionToken: sessionToken,
                                        email: email,
                                        userId: userId,
                                        trenniId: trenniId
                                    })
                                })
                                    .then(response => {
                                        if (!response.ok) {
                                            throw new Error('Network response was not ok');
                                        }
                                        location.reload();
                                    })
                                    .catch(error => {
                                        console.error('Error deleting trenn:', error);
                                    });
                            }
                        });


                        function renderData(data) {
                            // Clear previous content
                            popupContentReg.innerHTML = '';
                            popupContentOsalejad.innerHTML = '';


                            // Check if data is empty
                            if (data.length === 0) {
                                popupContentReg.textContent = 'Keegi pole registreerinud.';
                                return;
                            }

                            // Render fetched data to both popupContentReg and popupContentOsalejad
                            data.forEach(item => {
                                const regListItem = document.createElement('div');
                                regListItem.classList.add('reg-row');
                                regListItem.textContent = `${item.nimi} - ${item.√µppegrupp}`; // Adjust this according to your fetched data structure

                                // Create button
                                const button = document.createElement('button');
                                button.innerHTML = '<i class="fa-solid fa-user-minus fa-sm"></i>';
                                button.classList.add('delete-registration-button');

                                // Add event listener to show button on text hover
                                regListItem.addEventListener('mouseover', function () {
                                    button.style.display = 'inline-block';
                                    // cross the text out
                                    regListItem.style.textDecoration = 'line-through';
                                    regListItem.style.color = 'red';
                                });
                                regListItem.addEventListener('mouseout', function () {
                                    button.style.display = 'none';
                                    // remove the cross
                                    regListItem.style.textDecoration = 'none';
                                    regListItem.style.color = 'black';
                                });

                                // Add event listener to handle button click
                                button.addEventListener('click', function() {
                                    const sessionToken = sessionStorage.getItem('sessionToken');
                                    const email = sessionStorage.getItem('email');
                                    const userId = sessionStorage.getItem('userId');
                                    const kasutaja_id = item.kasutaja_id;
                                    const trenniId = item.trenni_id;


                                    // Confirm deletion
                                    const confirmDelete = confirm('Kas olete kindel, et soovite registreeritud kasutaja kustutada?');
                                    if (confirmDelete) {
                                        // Send data to delete-registration endpoint
                                        fetch('/delete-registration', {
                                            method: 'POST',
                                            headers: {
                                                'Content-Type': 'application/json'
                                            },
                                            body: JSON.stringify({
                                                sessionToken: sessionToken,
                                                email: email,
                                                userId: userId,
                                                kasutaja_id: kasutaja_id,
                                                trenniId: trenniId
                                            })
                                        })
                                            .then(response => {
                                                if (!response.ok) {
                                                    throw new Error('Network response was not ok');
                                                }
                                                // handle response if needed
                                                return response.json();
                                            })
                                            .then(data => {
                                                // handle success or display message to the user
                                                location.reload();
                                                // perform any other actions if needed
                                            })
                                            .catch(error => {
                                                console.error('Error deleting registration:', error);
                                                // handle error or display message to the user
                                                alert('An error occurred while deleting registration.');
                                            });
                                    }
                                });

                                // Append button to the row
                                regListItem.appendChild(button);

                                // Append row to the popup content
                                popupContentReg.appendChild(regListItem);

                                const osalejadListItem = document.createElement('div');
                                // Check if the content is 'Puudub' or 'Osaleb' and set color accordingly
                                if (item.osaleb === 'puudub') {
                                    osalejadListItem.textContent = `${item.nimi} - Puudub`;
                                    osalejadListItem.style.color = 'red'; // Color red if 'Puudub'
                                } else {
                                    osalejadListItem.textContent = `${item.nimi} - Osaleb`;
                                    osalejadListItem.style.color = 'green'; // Color green otherwise
                                }
                                popupContentOsalejad.appendChild(osalejadListItem);
                            });
                        }
                    });
                </script>


            </div>
        </section>


    <% } %>

    <div class="search-trenn">
    </div>
    <main class="training-content">

        <% if (userRole === 1) { %>
        <div class="subTitle">
            <h2 id="registreeritud trennid">Registreeritud trennid</h2>
        </div>

        <section class="minu-trennid">

        </section>
        <% } %>

            <% if (userRole !== 2) { %>
                <div class="subTitle">
                    <h2>Liitu trennidega!</h2>
                </div>
                <section class="join-trennid">
                    <!-- Display the same content here -->
                </section>
            <% } %>



    </main>

    <% if (userRole === 1) { %>

    <script>
        // Function to create popup for user input
        function createPopup(trenniId, trenniNimi) {
            // Add class to body to prevent scrolling
            document.body.classList.add('popup-open');

            // Create overlay
            const overlay = document.createElement('div');
            overlay.classList.add('overlay');
            document.body.appendChild(overlay);

            const popup = document.createElement('div');
            popup.classList.add('popup');

            popup.innerHTML = `
            <form id="userForm" onsubmit="submitForm(event, ${trenniId}, '${trenniNimi}')">
                <button class="close-button" type="button" onclick="closePopup()"><i class="fa-solid fa-xmark fa-xl"></i></button>
                <h2>Registreeri trenni</h2>
                <h4>${trenniNimi}</h4>
                <label for="firstName">Eesnimi:</label>
                <input type="text" id="firstName" name="firstName" required>

                <label for="lastName">Perenimi:</label>
                <input type="text" id="lastName" name="lastName" required>

                <label for="group">√ïppegrupp:</label>
                <input oninput="this.value = this.value.toUpperCase()" type="text" id="group" name="group" maxlength="10" required>

                <label for="gender">Sugu:</label>
                <div class="hold-radio">
                    <div>
                        <label for="male">Mees:</label>
                        <input type="radio" id="male" name="gender" value="mees" required>
                    </div>
                    <div>
                        <label for="female">Naine:</label>
                        <input type="radio" id="female" name="gender" value="naine" required>
                    </div>
                </div>
                <br>
                <button class="submit-registration" type="submit">Registreeri!</button>
            </form>
        `;

            document.body.appendChild(popup);
        }
        // Function to submit form data
        function submitForm(event, trenniId, trenniNimi) {
            event.preventDefault();

            const firstName = document.getElementById('firstName').value;
            const lastName = document.getElementById('lastName').value;
            const group = document.getElementById('group').value;
            const gender = document.querySelector('input[name="gender"]:checked').value;
            const email = sessionStorage.getItem('email');
            const sessionToken = sessionStorage.getItem('sessionToken');
            const userId = sessionStorage.getItem('userId');

            fetch('/submit-student-registration', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    trenniId,
                    firstName,
                    lastName,
                    group,
                    gender,
                    email,
                    sessionToken,
                    userId
                })
            })
                .then(response => {
                    if (!response.ok) {
                        // throw that error which server said 401, etc
                        throw new Error(response.statusText);
                    }
                    return response.json();
                })
                .then(data => {
                    // Optionally, handle success response here
                    closePopup();
                    location.reload();
                })
                .catch(error => {
                    console.error('There was a problem with the fetch operation:', error);
                    const form = document.getElementById('userForm');
                    if (error.message.includes('Unauthorized')) {
                        // Redirect to /sisene if session is invalid
                        closePopup();
                        window.location.href = '/sisene';
                    } else {
                        // Display error message and redirect to /
                        form.innerHTML = `
            <h2 class="valesti" style="color: red">${error.message}</h2>
        `;
                        setTimeout(() => {
                            window.location.href = '/';
                        }, 2000);
                    }
                });
        }

        // Function to close the popup
        function closePopup() {
            const popup = document.querySelector('.popup');
            const overlay = document.querySelector('.overlay');
            popup.remove();
            overlay.remove();
            // Remove class to allow scrolling
            document.body.classList.remove('popup-open');
        }
        </script>
    <% } %>

    <script>
        // Function to fetch data from the endpoint
        async function fetchData() {
            try {
                const response = await fetch('/fetch-trennid');
                const data = await response.json();
                return data;
            } catch (error) {
                console.error(error);
            }
        }

        <% if (userRole === 1 ) { %>

        // Function to handle leaving trennist
        async function leaveTrennist(userId, trenniId) {
            // Retrieve session data from sessionStorage
            const email = sessionStorage.getItem('email');
            const sessionToken = sessionStorage.getItem('sessionToken');

            if (!userId || !email || !sessionToken) {
                console.error('Invalid session data');
                return;
            }

            // Display confirmation dialog
            const confirmLeave = window.confirm('Olete kindel, et tahate lahkuda trennist?');

            // If user confirms leaving, proceed with the deletion
            if (confirmLeave) {
                try {
                    // Send request to delete row from trennis_k√§ijad
                    const response = await fetch(`/leave-trenn`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ userId, trenniId, email, sessionToken })
                    });
                    const data = await response.json();
                    // Call displayData function to refresh the UI
                    displayData();
                    location.reload();
                } catch (error) {
                    console.error('Error leaving trennist:', error);
                }
            }
        }

        <% } %>

        // Function to display fetched data
        async function displayData() {
            const data = await fetchData();
            const joinTrennidSection = document.querySelector('.join-trennid');
            const minuTrennidSection = document.querySelector('.minu-trennid');

            // Retrieve data from sessionStorage
            const userId = sessionStorage.getItem('userId');
            const email = sessionStorage.getItem('email');
            const sessionToken = sessionStorage.getItem('sessionToken');

            // Send request to fetch user's trennid if session data exists
            if (userId && email && sessionToken) {
                fetch(`/fetch-student-trennid`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ email, sessionToken, userId })
                })
                    .then(response => response.json())
                    .then(studentData => {
                        // Iterate through fetched data and create HTML elements to display it
                        data.forEach(trenn => {
                            const trennElement = document.createElement('div');
                            trennElement.classList.add('trenn');
                            // background color gradient
                            trennElement.style.background = `linear-gradient(90deg, ${trenn.trenni_v√§rv} 0%, ghostwhite 2%)`;

                            // Populate trennElement with data
                            const startTime = trenn.trenni_toimumise_algusaeg.slice(0, 5);
                            // Format end time (l√µpuaeg) to show only hours and minutes
                            const endTime = trenn.trenni_toimumise_l√µppaeg.slice(0, 5);

                            // Translate weekdays to Estonian
                            const translatedDays = trenn.trenni_toimumise_p√§ev.replace(/Monday/g, 'Esmasp√§ev').replace(/Tuesday/g, 'Teisip√§ev').replace(/Wednesday/g, 'Kolmap√§ev').replace(/Thursday/g, 'Neljap√§ev').replace(/Friday/g, 'Reede').replace(/Saturday/g, 'Laup√§ev').replace(/Sunday/g, 'P√ºhap√§ev');

                            // Check if the current trenn ID is in the student data
                            const isJoined = studentData.data && studentData.data.find(studentTrenn => studentTrenn.trenni_id === trenn.trenni_id);

                            // Determine the button text based on whether the user is joined to the trenn
                            const buttonText = isJoined ? 'Lahku trennist' : 'Registreeri trenni!';
                            const buttonAction = isJoined ? `leaveTrennist('${userId}', '${trenn.trenni_id}')` : `createPopup('${trenn.trenni_id}', '${trenn.trenni_nimi}')`;

                            // Populate trennElement with data
                            trennElement.innerHTML = `
            <div class="trenni-header">
                <h2>${trenn.trenni_nimi}</h2>
                <p>${startTime} - ${endTime}</p>
            </div>
            <p><strong>√ïpetaja:</strong> ${trenn.kasutaja_nimi}</p>
            <p style="color: #6b6b6b">${trenn.trenni_selgitus}</p>
            <p><strong>Toimumis p√§evad:</strong> ${translatedDays}</p>
            <p class="trenni-asukoht">${trenn.asukoht} | ${trenn.trenni_klass}</p>
            <button class="join-trenn-button" onclick="${buttonAction}">${buttonText}</button>
        `;

                            if (isJoined) {
                                minuTrennidSection.appendChild(trennElement);
                            } else {
                                joinTrennidSection.appendChild(trennElement);
                            }
                        });
                    })
                    .catch(error => console.error('Error fetching student data:', error));
            } else {
                // If session data doesn't exist, display all fetched trennid with "Registreeri trenni!" button
                data.forEach(trenn => {
                    const trennElement = document.createElement('div');
                    trennElement.classList.add('trenn');
                    // background color gradient
                    trennElement.style.background = `linear-gradient(90deg, ${trenn.trenni_v√§rv} 0%, ghostwhite 2%)`;
                    // Populate trennElement with data
                    const startTime = trenn.trenni_toimumise_algusaeg.slice(0, 5);
                    // Format end time (l√µpuaeg) to show only hours and minutes
                    const endTime = trenn.trenni_toimumise_l√µppaeg.slice(0, 5);

                    // Translate weekdays to Estonian
                    const translatedDays = trenn.trenni_toimumise_p√§ev.replace(/Monday/g, ' Esmasp√§ev').replace(/Tuesday/g, ' Teisip√§ev').replace(/Wednesday/g, ' Kolmap√§ev').replace(/Thursday/g, ' Neljap√§ev').replace(/Friday/g, ' Reede').replace(/Saturday/g, ' Laup√§ev').replace(/Sunday/g, ' P√ºhap√§ev');

                    // Populate trennElement with data
                    trennElement.innerHTML = `
        <div class="trenni-header">
            <h2>${trenn.trenni_nimi}</h2>
            <p>${startTime} - ${endTime}</p>
        </div>
        <p><strong>√ïpetaja:</strong> ${trenn.kasutaja_nimi}</p>
        <p style="color: #6b6b6b">${trenn.trenni_selgitus}</p>
        <p><strong>Toimumis p√§evad:</strong> ${translatedDays}</p>
        <p class="trenni-asukoht">${trenn.asukoht} | ${trenn.trenni_klass}</p>
        <button class="join-trenn-button" onclick="window.location.href = '/sisene'">Registreeri trenni!</button>
    `;

                    joinTrennidSection.appendChild(trennElement);
                });
            }
        }

        // Call displayData function when the page loads
        window.onload = displayData;

    </script>


</section>



<div class="mapBanner">
    <a href="https://www.google.com/maps?ll=58.349455,26.714113&amp;z=15&amp;t=m&amp;hl=en-US&amp;gl=EG&amp;mapclient=embed&amp;q=Kopli+1+50115+Tartu+Estonia" target="_blank" class="mapBanner_col" style="background-image: url('https://liikumine.voco.ee/wp-content/uploads/sites/11/2023/01/map_1.jpg')">
        Kopli 1
    </a>
    <a href="https://www.google.com/maps/place/P%C3%B5llu+11,+50303+Tartu,+Estonia/@58.3994611,26.7119631,17.25z/data=!4m13!1m7!3m6!1s0x46eb36f49f59f7b1:0xc60a936ef314737f!2sP%C3%B5llu+11,+50303+Tartu,+Estonia" target="_blank" class="mapBanner_col" style="background-image: url('https://liikumine.voco.ee/wp-content/uploads/sites/11/2023/01/map_2.jpg')">
        P√µllu 11
    </a>
</div>

<footer class="footer">
    <div class="container container-footer">
        <div class="footer_content">
            <div class="footer_logoCol">
                <a href="https://liikumine.voco.ee/" class="footer_logo">
                    <img src="https://liikumine.voco.ee/wp-content/uploads/sites/11/2023/01/VOCO.svg"
                         alt="VOCO Liikumine" class="footer_logoImg">
                </a>
            </div>
            <div class="footer_mainCol">
                <div class="footer_grid">
                    <div class="footer_col">
                        <h3 class="footer_title">
                            Kontakt
                        </h3>
                        <div class="footer_text">
                            <p><a href="mailto:info@voco.ee">info@voco.ee</a></p>
                            <p>7 361 810</p>
                        </div>
                    </div>
                    <div class="footer_col">
                        <h3 class="footer_title">
                            VOCO
                        </h3>
                        <div class="footer_text">
                            <p>Kopli 1</p>
                            <p>Tartu 50115 Eesti</p>
                        </div>
                    </div>
                    <div class="footer_col">
                        <h3 class="footer_title">
                            Privaatsustingimused
                        </h3>
                        <div class="footer_text">
                            <p><a href="#">Andmekaitse</a></p>
                            <p><a href="#">K√ºpsised</a></p>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="footer_bottom">
        ¬© Tartu rakenduslik kolled≈æ 2024
    </div>
</footer>
</body>


<script>
    // checkLogin.js

    document.addEventListener("DOMContentLoaded", function () {
        const siseneButton = document.getElementById('siseneButton');

        // Check if the user is logged in by making a request to the server
        fetch('/test')
            .then(response => response.json())
            .then(data => {
                const isLoggedIn = data.session && data.session.user !== undefined && data.session.user !== null;

                // Update the button text based on the user's login status
                siseneButton.innerText = isLoggedIn ? 'V√§lju' : 'Sisene';

                // Add a click event listener to the button
                siseneButton.addEventListener('click', function () {
                    if (isLoggedIn) {
                        // If logged in, make a request to the server to log out
                        fetch('/logout')
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    // If logout successful, reload the page to reflect the changes
                                    location.reload();
                                    // delete all sessionStorage
                                    sessionStorage.clear();
                                } else {
                                    console.error('Error logging out:', data.message);
                                }
                            })
                            .catch(error => console.error('Error logging out:', error));
                    } else {
                        // Handle the logic for navigating to the login page or any other actions
                        // Redirect to the login page, for example:
                        sessionStorage.clear();
                        window.location.href = '/sisene';
                    }
                });
            })
            .catch(error => console.error('Error checking login status:', error));
    });

</script>

<% if (userRole === 2 || userRole === 3) { %>

<script>
    const myToggleButton = document.querySelector('#toggle-button');
    const myTargetElement = document.querySelector('#trenniForm');
    const myTargetElement2 = document.querySelector('#broneeringuForm');

    let isHidden = false;

    myToggleButton.onclick = function() {
        myTargetElement.classList.toggle('hidden');
        myTargetElement2.classList.toggle('hidden');
        if (isHidden) {
            myToggleButton.innerHTML = '<i class="fa-regular fa-eye fa-lg"></i>';
        } else {
            myToggleButton.innerHTML = '<i class="fa-regular fa-eye-slash fa-lg"></i>';
        }
        isHidden = !isHidden;
    };


</script>

    <script>
        //handle form broneerimiseFrom
        document.getElementById('addBroneeringButton').addEventListener('click', function () {
            // Retrieve user data from sessionStorage
            var email = sessionStorage.getItem('email');
            var userId = sessionStorage.getItem('userId');
            var sessionToken = sessionStorage.getItem('sessionToken');

            // Check if user data exists
            if (!email || !userId || !sessionToken) {
                console.error('User data not found in sessionStorage');
                return;
            }

            // Prepare form data
            var formData = {
                koht: document.getElementById('broneeringuKoht').value,
                algusaeg: document.getElementById('broneeringuAlgusaeg').value,
                l√µppaeg: document.getElementById('broneeringuL√µpuaeg').value,
                email: email,
                userId: userId,
                sessionToken: sessionToken
            };

            console.log(formData);
            // Send form data to server
            fetch('/submit-broneering', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Optionally, do something after successful submission
                    location.reload();
                })
                .catch(error => {
                    console.error('Error:', error);
                    // Optionally, handle errors here
                });
        });
    </script>

<script>
    document.getElementById('addEventButton').addEventListener('click', function () {
        // Retrieve user data from sessionStorage
        var email = sessionStorage.getItem('email');
        var userId = sessionStorage.getItem('userId');
        var sessionToken = sessionStorage.getItem('sessionToken');

        // Check if user data exists
        if (!email || !userId || !sessionToken) {
            console.error('User data not found in sessionStorage');
            return;
        }

        // Prepare form data
        var formData = {
            eventTitle: document.getElementById('eventTitle').value,
            eventDescription: document.getElementById('eventDescription').value,
            days: [],
            eventStartTime: document.getElementById('eventStartTime').value,
            eventEndTime: document.getElementById('eventEndTime').value,
            location: (document.getElementById('option1').checked) ? "kopli" : "p√µllu",
            eventColor: document.getElementById('eventColor').value,
            eventRoom: (document.getElementById('option1').checked) ? document.getElementById('kopliRoomSelection').value : document.getElementById('p√µlluRoomSelection').value,
            email: email,
            userId: userId,
            sessionToken: sessionToken
        };

        // Collect selected days
        var daysCheckboxes = document.querySelectorAll('input[name="day"]:checked');
        daysCheckboxes.forEach(function (checkbox) {
            formData.days.push(checkbox.value);
        });

        // Send form data to server
        fetch('/submit-trennid', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                // Optionally, do something after successful submission
                location.reload();
            })
            .catch(error => {
                console.error('Error:', error);
                // Optionally, handle errors here
            });
    });
</script>

<% } %>

<% if (userRole === 1) { %>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Event delegation to capture click on checkboxes
        document.addEventListener('click', function(event) {
            if (event.target.type === 'checkbox' && event.target.name === 'trenn') {
                const checkbox = event.target;
                const eventId = checkbox.id;
                const eventName = checkbox.value;

                // Save checkbox status to local storage
                localStorage.setItem(eventId, checkbox.checked);

                // Traverse up the DOM to find the parent element with data-date attribute
                let parentElement = checkbox.parentElement;
                while (parentElement && !parentElement.dataset.date) {
                    parentElement = parentElement.parentElement;
                }

                // If parent element found, retrieve data-date attribute
                if (parentElement && parentElement.dataset.date) {
                    const eventDate = parentElement.dataset.date;

                    // Retrieve data from sessionStorage
                    const userId = sessionStorage.getItem('userId');
                    const email = sessionStorage.getItem('email');
                    const sessionToken = sessionStorage.getItem('sessionToken');

                    // Check if userId, email, and sessionToken exist
                    if (userId && email && sessionToken) {
                        // Send request to server endpoint
                        fetch('/user-participate', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                email,
                                sessionToken,
                                userId,
                                eventId,
                                eventName,
                                eventDate
                            })
                        })
                            .then(response => {
                                if (response.ok) {
                                    console.log('Data sent successfully');
                                } else {
                                    console.error('Failed to send data to server');
                                }
                            })
                            .catch(error => console.error('Error sending data:', error));
                    } else {
                        console.error('Invalid session data');
                    }
                }
            }
        });
    });
</script>

<% } %>

</html>

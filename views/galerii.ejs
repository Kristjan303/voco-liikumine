<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="../css/index.css">
    <link rel="stylesheet" href="../css/galerii.css">
    <title>Galerii ðŸ–¼ | VOCO Liikumine</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css">
</head>
<body>
<header>
    <div class="header-links">
        <a href="https://www.facebook.com/tartuvoco/">
            <i class="fa-brands fa-square-facebook fa-xl" style="color: #000000;"></i>
        </a>
        <a href="https://www.tiktok.com/@tartuvoco?lang=en">
            <i class="fa-brands fa-tiktok fa-xl" style="color: #000000;"></i>
        </a>
        <a href="https://www.instagram.com/tartuvoco/?hl=en">
            <i class="fa-brands fa-instagram fa-xl" style="color: #000000;"></i>
        </a>
    </div>
    <div class="header-search">
        <input type="text" placeholder="Otsi...">
        <button type="submit">
            <i class="fa-solid fa-search fa-lg" style="color: #000000;"></i>
        </button>
        <a id="siseneButton" class="sisene" href="/sisene">Sisene</a>
    </div>
</header>
<nav>
    <a href="/" class="nav-logo">
        <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
             viewBox="0 0 412.74 334.7" style="enable-background:new 0 0 412.74 334.7;" xml:space="preserve">
          <style type="text/css">
              .st0{fill:#FFFFFF;}
          </style>
            <path class="st0" d="M259.98,112.52c0,27.49-22.29,49.78-49.78,49.78c-27.49,0-49.78-22.29-49.78-49.78
              c0-27.49,22.29-49.78,49.78-49.78C237.69,62.74,259.98,85.02,259.98,112.52 M350.92,223.78c0-27.49-22.29-49.78-49.78-49.78
              s-49.78,22.29-49.78,49.78c0,27.49,22.29,49.78,49.78,49.78S350.92,251.27,350.92,223.78 M214.48,223.92l35.27-35.27
              c-9.01-9.05-21.49-14.65-35.27-14.65c-27.49,0-49.78,22.29-49.78,49.78s22.29,49.78,49.78,49.78c13.71,0,26.13-5.54,35.13-14.51
              L214.48,223.92z M60.31,67.73l52.2,90.51l52.2-90.51H60.31z"/>
        </svg>
    </a>
    <div class="nav-links">
        <a href="/artiklid">Artiklid</a>
        <a href="/uudised">Uudised</a>
        <a href="/foorum">Foorum</a>
        <a href="/treeningud">Treeningud</a>
        <a style="color: #2980b9" href="galerii">Galerii</a>
    </div>
</nav>

<section class="galerii">
    <div class="section-nav">
        <div class="path">
            <p><a href="/public">Avaleht</a> > <span>Galerii</span></p>
        </div>
        <h1>Galerii</h1>
        <% if (userRole === 2) { %>
            <p>Lisa uus kaust:</p>
            <div class="new-directory">
                <form id="createDirectoryForm">
                    <input type="text" name="newDirectoryName" id="newDirectoryName" placeholder="Uue kausta nimi">
                    <button type="button" onclick="createDirectory()" id="clearInput"><i class="fa-solid fa-plus fa-lg"></i></button>
                </form>
                <div class="error" id="error-message-container">
                    <!-- Error message will be dynamically inserted here -->
                </div>
            </div>

            <div class="upload">
                <div class="upload-buttons">
                    <label for="fileInput" class="custom-button"><i class="fas fa-plus fa-xl"></i></label>
                    <input type="file" id="fileInput" multiple accept=".png, .jpg" onchange="countFiles()">
                    <!-- Add a dropdown menu for choosing existing folders -->
                    <select id="folderDropdown" onfocus="fetchFolderNames()">
                        <option value="">Vali kaust</option>
                        <!-- Options will be dynamically added here -->
                    </select>
                    <button onclick="uploadFiles()"><i class="fa-solid fa-upload fa-xl"></i></button>
                </div>
                <p id="fileCount" onclick="toggleFileList()">Ãœhtegi faili pole valitud</p>
                <ul id="fileList" onclick="removeFile(event)"></ul>
            </div>
        <% } %>
    </div>
    <div class="search-galerii">
    </div>
    <main class="gallery-content">
        <div class="newest">
            <h4 style="margin-left: 10px">Uusimad pildid</h4>
            <ul  style="display: flex" id="newestTree"></ul>
        </div>
        <div class="file-tree">
            <div class="hold">
                <h4>Kaustad:</h4>
                <ul id="folderTree"></ul>
            </div>
            <ul id="fileTree"></ul>
        </div>
    </main>
</section>
<div class="mapBanner">
    <a href="https://www.google.com/maps?ll=58.349455,26.714113&amp;z=15&amp;t=m&amp;hl=en-US&amp;gl=EG&amp;mapclient=embed&amp;q=Kopli+1+50115+Tartu+Estonia" target="_blank" class="mapBanner_col" style="background-image: url('https://liikumine.voco.ee/wp-content/uploads/sites/11/2023/01/map_1.jpg')">
        Kopli 1
    </a>
    <a href="https://www.google.com/maps/place/P%C3%B5llu+11,+50303+Tartu,+Estonia/@58.3994611,26.7119631,17.25z/data=!4m13!1m7!3m6!1s0x46eb36f49f59f7b1:0xc60a936ef314737f!2sP%C3%B5llu+11,+50303+Tartu,+Estonia" target="_blank" class="mapBanner_col" style="background-image: url('https://liikumine.voco.ee/wp-content/uploads/sites/11/2023/01/map_2.jpg')">
        PÃµllu 11
    </a>
</div>

<footer class="footer">
    <div class="container container-footer">
        <div class="footer_content">
            <div class="footer_logoCol">
                <a href="https://liikumine.voco.ee/" class="footer_logo">
                    <img src="https://liikumine.voco.ee/wp-content/uploads/sites/11/2023/01/VOCO.svg"
                         alt="VOCO Liikumine" class="footer_logoImg">
                </a>
            </div>
            <div class="footer_mainCol">
                <div class="footer_grid">
                    <div class="footer_col">
                        <h3 class="footer_title">
                            Kontakt
                        </h3>
                        <div class="footer_text">
                            <p><a href="mailto:info@voco.ee">info@voco.ee</a></p>
                            <p>7 361 810</p>

                        </div>
                    </div>
                    <div class="footer_col">
                        <h3 class="footer_title">
                            VOCO
                        </h3>
                        <div class="footer_text">
                            <p>Kopli 1</p>
                            <p>Tartu 50115 Eesti</p>

                        </div>
                    </div>
                    <div class="footer_col">
                        <h3 class="footer_title">
                            Privaatsustingimused
                        </h3>
                        <div class="footer_text">
                            <p><a href="#">Andmekaitse</a></p>
                            <p><a href="#">KÃ¼psised</a></p>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="footer_bottom">
        Â© Tartu rakenduslik kolledÅ¾ 2024
    </div>
</footer>

</body>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        fetchFolderTree();
    });

    function fetchFolderTree() {
        var folderTree = document.getElementById('folderTree');

        // Fetch folders from the server and populate the file tree
        fetch('/galerii/folders') // Replace with your server endpoint
            .then(response => response.json())
            .then(data => {
                // Clear existing folder tree
                folderTree.innerHTML = '';

                // Populate the file tree with folders
                data.forEach(function (folder) {
                    var folderItem = document.createElement('li');
                    folderItem.innerHTML = '<i class="fa-solid fa-folder"></i> <span class="folder">' + folder + '</span>';
                    folderItem.className = 'folder';
                    folderItem.addEventListener('click', function () {
                        fetchImagesInFolder(folder);
                    });
                    folderTree.appendChild(folderItem);
                });
            })
            .catch(error => {
                console.error('Error fetching folders:', error);
            });
    }
    function fetchImagesInFolder(folder) {
        var folderList = document.getElementById('fileTree');

        // Fetch images in the selected folder
        fetch('/galerii/images?folder=' + folder) // Replace with your server endpoint
            .then(response => response.json())
            .then(data => {
                // Clear existing image list
                folderList.innerHTML = '';

                // Populate the image list with images
                data.forEach(function (image) {
                    var imageItem = document.createElement('li');
                    var imgElement = document.createElement('img');
                    imgElement.src = '/galerii/' + folder + '/' + image; // Adjust the path based on your server structure
                    imgElement.alt = image; // Set alt attribute to image name

                    // Add an event listener to open the image in a new tab when clicked
                    imgElement.addEventListener('click', function () {
                        window.open('/galerii/' + folder + '/' + image, '_blank');
                    });

                    imageItem.appendChild(imgElement);
                    folderList.appendChild(imageItem);
                });

                // Show the image list
                folderList.style.display = 'flex';
            })
            .catch(error => {
                console.error('Error fetching images in folder:', error);
            });
    }



</script>

<script>
    document.addEventListener('DOMContentLoaded', async function () {
        const response = await fetch('/galerii/latest-images');
        const data = await response.json();

        if (response.ok) {
            const newestTree = document.getElementById('newestTree');
            newestTree.innerHTML = ''; // Clear the existing content

            data.latestImages.slice(0, 10).forEach(image => {
                const listItem = document.createElement('li');
                const imageElement = document.createElement('img');
                imageElement.src = image;
                listItem.appendChild(imageElement);
                newestTree.appendChild(listItem);
            });
        } else {
            console.error('Failed to fetch latest images:', data.message);
        }
    });
</script>

<script>
    function fetchFolderNames() {
        var folderDropdown = document.getElementById('folderDropdown');

        // Fetch folders from the server and populate the dropdown
        fetch('/galerii/folders') // Replace with your server endpoint
            .then(response => response.json())
            .then(data => {
                // Clear existing options
                folderDropdown.innerHTML = '';

                folderDropdown.innerHTML += '<option value="" disabled selected hidden>Vali kaust</option>';

                // Add fetched folders to the dropdown, excluding "Vali kaust"
                data.forEach(function (folder) {
                    if (folder !== 'Vali kaust') {
                        folderDropdown.innerHTML += '<option value="' + folder + '">' + folder + '</option>';
                    }
                });
            })
            .catch(error => {
                console.error('Error fetching folders:', error);
            });
    }
</script>

<script>
    async function createDirectory() {
        const newDirectoryName = document.getElementById('newDirectoryName').value;
        const errorMessageContainer = document.getElementById('error-message-container');
        var newDirectoryNameInput = document.getElementById('newDirectoryName');
        if (!newDirectoryName) {
            errorMessageContainer.innerHTML = 'Kausta nimi on kohustuslik';
            return;
        }

        try {
            const response = await fetch('/create-directory', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ newDirectoryName }),
            });

            if (response.ok) {
                // Optionally, you can reset the form or perform any other action here.
                newDirectoryNameInput.value = "";
                alert('Kaust loodud edukalt');
                // Clear error message container if retry is successful
                errorMessageContainer.innerHTML = "";
            } else {
                const errorMessage = await response.text();
                errorMessageContainer.innerHTML = `Kausta loomine ebaÃµnnestus: ${errorMessage}`;
            }
        } catch (error) {
            console.error('Error creating directory:', error);
            errorMessageContainer.innerHTML = 'An error occurred while creating the directory';
        }
    }

</script>
<script>
    // checkLogin.js

    document.addEventListener("DOMContentLoaded", function () {
        const siseneButton = document.getElementById('siseneButton');

        // Check if the user is logged in by making a request to the server
        fetch('/test')
            .then(response => response.json())
            .then(data => {
                const isLoggedIn = data.session && data.session.user !== undefined && data.session.user !== null;

                // Update the button text based on the user's login status
                siseneButton.innerText = isLoggedIn ? 'VÃ¤lju' : 'Sisene';

                // Add a click event listener to the button
                siseneButton.addEventListener('click', function () {
                    if (isLoggedIn) {
                        // If logged in, make a request to the server to log out
                        fetch('/logout')
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    // If logout successful, reload the page to reflect the changes
                                    location.reload();
                                } else {
                                    console.error('Error logging out:', data.message);
                                }
                            })
                            .catch(error => console.error('Error logging out:', error));
                    } else {
                        // Handle the logic for navigating to the login page or any other actions
                        // Redirect to the login page, for example:
                        localStorage.clear();
                        window.location.href = '/sisene';
                    }
                });
            })
            .catch(error => console.error('Error checking login status:', error));
    });

</script>
<script>
    function countFiles() {
        var fileInput = document.getElementById('fileInput');
        var fileCountElement = document.getElementById('fileCount');
        var fileListElement = document.getElementById('fileList');
        var fileList = document.getElementById('fileList');

        var fileCount = fileInput.files.length;
        fileCountElement.textContent = fileCount > 0 ? fileCount + (fileCount === 1 ? ' fail valitud â†’' : ' faili valitud â†’') : 'Ãœhtegi faili pole valitud';

        // Populate the file list
        fileListElement.innerHTML = '';
        for (var i = 0; i < fileCount; i++) {
            var fileName = fileInput.files[i].name;
            var listItem = document.createElement('li');
            listItem.textContent = fileName;
            fileListElement.appendChild(listItem);
        }}

    function toggleFileList() {
        var fileListElement = document.getElementById('fileList');
        fileListElement.style.display = fileListElement.style.display === 'none' ? 'block' : 'none';
    }
    function removeFile(event) {
        var fileInput = document.getElementById('fileInput');
        var fileListElement = document.getElementById('fileList');

        // Check if the click occurred on an <li> element
        if (event.target.tagName.toLowerCase() === 'li') {
            var fileNameToRemove = event.target.textContent;
            var newFiles = [];

            for (var i = 0; i < fileInput.files.length; i++) {
                if (fileInput.files[i].name !== fileNameToRemove) {
                    newFiles.push(fileInput.files[i]);
                }
            }

            // Create a new FileList with the remaining files
            var newFileList = new DataTransfer();
            for (var j = 0; j < newFiles.length; j++) {
                newFileList.items.add(newFiles[j]);
            }

            // Set the new FileList to the input.files property
            fileInput.files = newFileList.files;

            // Re-render the file list
            countFiles();
        }
    }


    async function uploadFiles() {
        var fileInput = document.getElementById('fileInput');
        var folderDropdown = document.getElementById('folderDropdown');
        var userId = sessionStorage.getItem('userId'); // Retrieve user ID from local storage

        var selectedFiles = fileInput.files;
        var selectedFolder = folderDropdown.value;

        if (selectedFiles.length === 0 || !selectedFolder || !userId) {
            alert('Palun vali kaust ja failid enne Ã¼leslaadimist!');
            return;
        }

        // Create a FormData object to send files, folder information, and user ID
        var formData = new FormData();
        formData.append('folder', selectedFolder);
        formData.append('userId', userId); // Add user ID to the form data

        for (var i = 0; i < selectedFiles.length; i++) {
            formData.append('files', selectedFiles[i]);
        }

        // Perform the file upload using fetch
        fetch('/galerii/upload', {
            method: 'POST',
            body: formData,
        })
            .then(response => response.json())
            .then(data => {
                console.log('Server response:', data);
                alert('Failid Ã¼les laetud edukalt!');
                // Handle the response from the server as needed
            })
            .catch(error => {
                console.error('Error uploading files:', error);
            });

        // Clear the file input and update the file count display
        fileInput.value = '';
        folderDropdown.value = '';
        countFiles();
    }
</script>

</html>

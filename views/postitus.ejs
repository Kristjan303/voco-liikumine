<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="../css/index.css">
    <link rel="stylesheet" href="../css/postitus.css">
    <title>Foorum ✒ | <%= postTitle %></title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css">
</head>
<body>
<header>
    <div class="header-links">
        <a href="https://www.facebook.com/tartuvoco/">
            <i class="fa-brands fa-square-facebook fa-xl" style="color: #000000;"></i>
        </a>
        <a href="https://www.tiktok.com/@tartuvoco?lang=en">
            <i class="fa-brands fa-tiktok fa-xl" style="color: #000000;"></i>
        </a>
        <a href="https://www.instagram.com/tartuvoco/?hl=en">
            <i class="fa-brands fa-instagram fa-xl" style="color: #000000;"></i>
        </a>
    </div>
    <div class="header-search">
        <input type="text" placeholder="Otsi kommentaaride seast...">
        <button type="submit">
            <i class="fa-solid fa-search fa-lg" style="color: #000000;"></i>
        </button>
        <a id="siseneButton" class="sisene" href="/sisene">Sisene</a>
    </div>
</header>
<nav>
    <a href="/" class="nav-logo">
        <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
             viewBox="0 0 412.74 334.7" style="enable-background:new 0 0 412.74 334.7;" xml:space="preserve">
          <style type="text/css">
              .st0{fill:#FFFFFF;}
          </style>
            <path class="st0" d="M259.98,112.52c0,27.49-22.29,49.78-49.78,49.78c-27.49,0-49.78-22.29-49.78-49.78
              c0-27.49,22.29-49.78,49.78-49.78C237.69,62.74,259.98,85.02,259.98,112.52 M350.92,223.78c0-27.49-22.29-49.78-49.78-49.78
              s-49.78,22.29-49.78,49.78c0,27.49,22.29,49.78,49.78,49.78S350.92,251.27,350.92,223.78 M214.48,223.92l35.27-35.27
              c-9.01-9.05-21.49-14.65-35.27-14.65c-27.49,0-49.78,22.29-49.78,49.78s22.29,49.78,49.78,49.78c13.71,0,26.13-5.54,35.13-14.51
              L214.48,223.92z M60.31,67.73l52.2,90.51l52.2-90.51H60.31z"/>
        </svg>
    </a>
    <div class="nav-links">
        <a href="../artiklid">Artiklid</a>
        <a href="../uudised">Uudised</a>
        <a style="color: #2980b9" href="../foorum">Foorum</a>
        <a href="../treeningud">Treeningud</a>
        <a href="../galerii">Galerii</a>
    </div>
</nav>

<section class="foorum">
    <div class="section-nav">
        <div class="path">
            <p><a href="/">Avaleht</a> > <a href="/foorum">Foorum</a> > <span>"<%= postTitle %>"</span></p>
        </div>
        <h1>Foorum</h1>
        <div class="general">
            <p><%= userName %></p>
            <p>●</p>
            <p><%= postDate %></p>
        </div>
    </div>
    <main class="forum-content">
        <h2><%= postTitle %></h2>
        <p><%= postContent %></p>
    </main>

    <% if (userRole === 1 || userRole === 2 || userRole === 3) { %>

        <form id="commentForm">
            <label for="postComment">Lisa kommentaar</label>
            <textarea id="postComment" name="postComment" placeholder="Kirjuta midagi..." required maxlength="10000"></textarea>
            <button type="submit">Postita</button>
        </form>

        <script>
            // JavaScript code to automatically resize the textarea based on its content
            const textarea = document.getElementById('postComment');

            textarea.addEventListener('input', () => {
                // Reset textarea height to auto so that it grows as content increases
                textarea.style.height = 'auto';
                // Set the height of the textarea to its scroll height, which will adjust its size based on content
                textarea.style.height = textarea.scrollHeight + 'px';
            });
        </script>

    <% } %>

    <div class="hold-comments">
        <div id="commentsContainer">

        </div>
    </div>
</section>





<div class="mapBanner">
    <a href="https://www.google.com/maps?ll=58.349455,26.714113&amp;z=15&amp;t=m&amp;hl=en-US&amp;gl=EG&amp;mapclient=embed&amp;q=Kopli+1+50115+Tartu+Estonia" target="_blank" class="mapBanner_col" style="background-image: url('https://liikumine.voco.ee/wp-content/uploads/sites/11/2023/01/map_1.jpg')">
        Kopli 1
    </a>
    <a href="https://www.google.com/maps/place/P%C3%B5llu+11,+50303+Tartu,+Estonia/@58.3994611,26.7119631,17.25z/data=!4m13!1m7!3m6!1s0x46eb36f49f59f7b1:0xc60a936ef314737f!2sP%C3%B5llu+11,+50303+Tartu,+Estonia" target="_blank" class="mapBanner_col" style="background-image: url('https://liikumine.voco.ee/wp-content/uploads/sites/11/2023/01/map_2.jpg')">
        Põllu 11
    </a>
</div>

<footer class="footer">
    <div class="container container-footer">
        <div class="footer_content">
            <div class="footer_logoCol">
                <a href="https://liikumine.voco.ee/" class="footer_logo">
                    <img src="https://liikumine.voco.ee/wp-content/uploads/sites/11/2023/01/VOCO.svg"
                         alt="VOCO Liikumine" class="footer_logoImg">
                </a>
            </div>
            <div class="footer_mainCol">
                <div class="footer_grid">
                    <div class="footer_col">
                        <h3 class="footer_title">
                            Kontakt
                        </h3>
                        <div class="footer_text">
                            <p><a href="mailto:info@voco.ee">info@voco.ee</a></p>
                            <p>7 361 810</p>

                        </div>
                    </div>
                    <div class="footer_col">
                        <h3 class="footer_title">
                            VOCO
                        </h3>
                        <div class="footer_text">
                            <p>Kopli 1</p>
                            <p>Tartu 50115 Eesti</p>

                        </div>
                    </div>
                    <div class="footer_col">
                        <h3 class="footer_title">
                            Privaatsustingimused
                        </h3>
                        <div class="footer_text">
                            <p><a href="#">Andmekaitse</a></p>
                            <p><a href="#">Küpsised</a></p>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="footer_bottom">
        © Tartu rakenduslik kolledž 2024
    </div>
</footer>

</body>
<script>
    // checkLogin.js

    document.addEventListener("DOMContentLoaded", function () {
        const siseneButton = document.getElementById('siseneButton');

        // Check if the user is logged in by making a request to the server
        fetch('/test')
            .then(response => response.json())
            .then(data => {
                const isLoggedIn = data.session && data.session.user !== undefined && data.session.user !== null;

                // Update the button text based on the user's login status
                siseneButton.innerText = isLoggedIn ? 'Välju' : 'Sisene';

                // Add a click event listener to the button
                siseneButton.addEventListener('click', function () {
                    if (isLoggedIn) {
                        // If logged in, make a request to the server to log out
                        fetch('/logout')
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    // If logout successful, reload the page to reflect the changes
                                    location.reload();
                                    // delete all sessionStorage
                                    sessionStorage.clear();
                                } else {
                                    console.error('Error logging out:', data.message);
                                }
                            })
                            .catch(error => console.error('Error logging out:', error));
                    } else {
                        // Handle the logic for navigating to the login page or any other actions
                        // Redirect to the login page, for example:
                        localStorage.clear();
                        window.location.href = '/sisene';
                    }
                });
            })
            .catch(error => console.error('Error checking login status:', error));
    });

</script>

<% if (userRole === 1 || userRole === 2 || userRole === 3) { %>

    <script>
        document.addEventListener("DOMContentLoaded", function() {
            const commentForm = document.getElementById('commentForm');
            commentForm.addEventListener('submit', function(event) {
                event.preventDefault();

                const postComment = document.getElementById('postComment').value;
                const postTitle = '<%= postTitle %>'; // Assuming postTitle is being populated from server-side

                const payload = {
                    postComment: postComment,
                    postTitle: postTitle,
                    email: sessionStorage.getItem('email'),
                    userId: sessionStorage.getItem('userId'),
                    sessionToken: sessionStorage.getItem('sessionToken')
                };

                fetch('/submit-comment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(payload)
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Failed to post comment');
                        }
                        return response.json();
                    })
                    .then(data => {
                        alert('Kommentaar edukalt postitatud!')
                        location.reload();
                        // Handle success if needed
                    })
                    .catch(error => {
                        console.error('Error posting comment:', error);
                        // Handle error if needed
                    });
            });
        });
    </script>

<% } %>

<script>
    document.addEventListener("DOMContentLoaded", function() {
        // Get the postTitle value from the page
        const postTitle = '<%= postTitle %>'; // Assuming postTitle is a variable in your page

        // Fetch comments for the given postTitle
        fetch(`/get-comments?postTitle=${encodeURIComponent(postTitle)}`)
            .then(response => response.json())
            .then(comments => {
                // Reorder the comments array so that highComments are on top
                comments.sort((a, b) => b.highComment - a.highComment);

                // Assuming you have an element with id 'commentsContainer' to display comments
                const commentsContainer = document.getElementById('commentsContainer');

                // Loop through comments and append them to the comments container
                comments.forEach(comment => {
                    // Create comment logic element
                    const commentLogicElement = document.createElement('div');
                    commentLogicElement.classList.add('comment-logic');

                    // Create a black line element
                    const blackLineElement1 = document.createElement('hr');
                    blackLineElement1.classList.add('black-line');
                    commentLogicElement.appendChild(blackLineElement1);
                    const blackLineElement2 = document.createElement('hr');
                    blackLineElement2.classList.add('black-line2');
                    commentLogicElement.appendChild(blackLineElement2);

                    // Create comment element
                    const commentElement = document.createElement('div');
                    commentElement.classList.add('comment');

                    // Formatting date and time according to Estonian standards
                    const commentDateTime = new Date(comment.commentDate).toLocaleString('et-EE', { dateStyle: 'medium', timeStyle: 'medium' });

                    // Check if the comment is a high comment and set background color accordingly
                    if (comment.highComment === 1) {
                        commentElement.classList.add('high-comment');
                    }

                    commentElement.innerHTML = `
                    <div class="hold-data">
                        <p>${comment.commenterName}</p>
                        <p>●</p>
                        <p>${commentDateTime}</p>
                    </div>
                    <p>${comment.commentContent}</p>
                    <% if (isAuthor) { %>
                        <button data-comment-id="${comment.commentId}" class="pinComment" data-high-comment="${comment.highComment}"><i class="fa-solid fa-thumbtack fa-sm"></i></button>
                    <% } %>
                `;

                    // Append comment element to comment logic element
                    commentLogicElement.appendChild(commentElement);

                    // Append comment logic element to comments container
                    commentsContainer.appendChild(commentLogicElement);
                });

                // Add event listener for dynamically added buttons
                commentsContainer.addEventListener('click', function(event) {
                    const pinCommentButton = event.target.closest('.pinComment');
                    if (pinCommentButton) {
                        // If the clicked element or its ancestor has the class 'pinComment'
                        const commentId = pinCommentButton.getAttribute('data-comment-id');
                        const commenterName = pinCommentButton.closest('.comment').querySelector('.hold-data p').textContent;
                        const email = sessionStorage.getItem('email');
                        const sessionToken = sessionStorage.getItem('sessionToken');
                        const userId = sessionStorage.getItem('userId');

                        // Create data object to send to server
                        const data = {
                            commentId: commentId,
                            commenterName: commenterName,
                            email: email,
                            sessionToken: sessionToken,
                            userId: userId
                        };

                        // Send data to server
                        fetch('/pin-comment', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(data)
                        })
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Failed to pin comment');
                                }
                                // Handle success response if needed
                                location.reload();
                                console.log('Comment pinned successfully');
                            })
                            .catch(error => console.error('Error pinning comment:', error));
                    }
                });
            })
            .catch(error => console.error('Error fetching comments:', error));
    });

</script>
<script>
    function searchComments() {
        const searchInput = document.querySelector('.header-search input').value.trim().toLowerCase();
        const comments = document.querySelectorAll('.comment');

        comments.forEach(comment => {
            const contentParagraphs = comment.querySelectorAll('p:not(.hold-data p)');
            let content = '';
            contentParagraphs.forEach(paragraph => {
                content += paragraph.textContent.trim().toLowerCase() + ' ';
            });

            const author = comment.querySelector('.hold-data p:first-child').textContent.toLowerCase().trim();
            const date = comment.querySelector('.hold-data p:last-child').textContent.toLowerCase().trim();

            if (content.includes(searchInput) ||
                author.includes(searchInput) ||
                date.includes(searchInput)) {
                comment.style.display = ''; // Show the comment if it matches the search
                comment.parentElement.style.display = ''; // Show the comment logic wrapper
            } else {
                comment.style.display = 'none'; // Hide the comment if it doesn't match the search
                comment.parentElement.style.display = 'none'; // Hide the comment logic wrapper
            }
        });
    }

    // Add event listener to trigger search on input
    document.querySelector('.header-search input').addEventListener('input', searchComments);
</script>



</html>

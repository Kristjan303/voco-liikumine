<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="../css/index.css">
    <link rel="stylesheet" href="../css/foorum.css">
    <link rel="stylesheet" href="../css/skeletonItems.css">
    <title>Foorum ✒ | VOCO Liikumine</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css">
</head>
<body>
<header>
    <div class="header-links">
        <a href="https://www.facebook.com/tartuvoco/">
            <i class="fa-brands fa-square-facebook fa-xl" style="color: #000000;"></i>
        </a>
        <a href="https://www.tiktok.com/@tartuvoco?lang=en">
            <i class="fa-brands fa-tiktok fa-xl" style="color: #000000;"></i>
        </a>
        <a href="https://www.instagram.com/tartuvoco/?hl=en">
            <i class="fa-brands fa-instagram fa-xl" style="color: #000000;"></i>
        </a>
    </div>
    <div class="header-search">
        <input type="text" id="searchInput" placeholder="Otsi...">
        <button type="button" id="searchButton">
            <i class="fa-solid fa-search fa-lg" style="color: #000000;"></i>
        </button>
        <a id="siseneButton" class="sisene" href="/sisene">Sisene</a>
    </div>
    <script>
        document.getElementById("searchButton").addEventListener("click", function () {
            sendData();
        });

        document.getElementById("searchInput").addEventListener("keydown", function (event) {
            if (event.key === "Enter") {
                sendData();
            }
        });

        function sendData() {
            var userInput = document.getElementById("searchInput").value.trim();
            if (userInput.length > 3) {
                sendDataToServer(userInput);
            } else {
                alert("Please enter at least 4 characters before searching.");
            }
        }

        function sendDataToServer(input) {
            var xhr = new XMLHttpRequest();
            xhr.open("POST", "/search", true);
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        var response = JSON.parse(xhr.responseText);
                        if (response.success) {
                            var url = response.url;
                            var data = response.data; // Extract the data from the response
                            window.location.href = `${url}?data=${JSON.stringify(data)}`; // Pass data as query parameter
                        } else {
                            alert("Search failed. Please try again later.");
                        }
                    } else {
                        alert("Error: " + xhr.statusText);
                    }
                }
            };
            var data = JSON.stringify({ query: input });
            xhr.send(data);
        }
    </script>
</header>
<nav>
    <a href="/" class="nav-logo">
        <img style="height: 80px" src="/logos/voco-logo-04-3.png">

    </a>
    <div class="nav-links">
        <a href="artiklid">Artiklid</a>
        <a href="uudised">Uudised</a>
        <a style="color: #2980b9" href="foorum">Foorum</a>
        <a href="treeningud">Treeningud</a>
        <a href="galerii">Galerii</a>
        <a href="kontakt">Kontakt</a>

    </div>
</nav>

<section class="foorum">
    <div class="section-nav">
        <div class="path">
            <p><a href="/">Avaleht</a> > <span>Foorum</span></p>
        </div>
        <h1>Foorum</h1>

        <section class="hold-filter">
            <select id="sortingDropdown" onchange="handleSortingChange()">
                <option value="popularity">Populaarseimad</option>
                <option value="leastPopularity">Vähem populaarsed</option>
                <option value="newest">Uusimad</option>
                <option value="oldest">Vanimad</option>
            </select>
            <div class="filter-search">
                <input type="text" id="filterSearchInput" placeholder="Otsi postituste seast...">
                <button type="submit" onclick="deleteInput()">
                    <i class="fa-regular fa-circle-xmark fa-lg"></i>
                </button>
            </div>

            <% if (userRole === 1 || userRole === 2 || userRole === 3) { %>

                <button id="toggle-button"><i class="fa-regular fa-eye fa-lg"></i></button>



            <% } %>
        </section>
    </div>



    <div class="search-forum">
    </div>


    <main class="forum-content">
        <% if (userRole === 1 || userRole === 2 || userRole === 3) { %>

            <div id="createPost" >
                <form id="createPostForm">
                    <h2>Loo postitus</h2>
                    <div class="form-group-title">
                        <label for="postTitle">Pealkiri</label>
                        <input type="text" id="postTitle" name="postTitle" required maxlength="100"> <!-- Max length for TINYTEXT -->
                    </div>
                    <div class="form-group-content">
                        <label for="postContent">Sisu</label>
                        <textarea id="postContent" name="postContent" required maxlength="10000"></textarea> <!-- Max length for TEXT -->
                        <div class="char-count" id="contentCharCount" style="margin-top: 5px">Tähti kasutatud: 0</div> <!-- Counter for post content -->
                    </div>

                    <div class="error-message" id="postTitleError"></div>

                    <button type="submit" id="createPostButton">Loo postitus</button>
                </form>
                <div class="your-posts">
                    <h2>Minu postitused</h2>
                </div>
                <div class="your-comments">
                    <h2>Minu komentaarid</h2>
                </div>
            </div>

        <script>
            // Function to update character count for post title
            document.getElementById('postTitle').addEventListener('input', function() {
                const currentLength = this.value.length;
                document.getElementById('titleCharCount').textContent = `Tähti kasutatud: ${currentLength}`;
            });

            // Function to update character count for post content
            document.getElementById('postContent').addEventListener('input', function() {
                const currentLength = this.value.length;
                document.getElementById('contentCharCount').textContent = `Tähti kasutatud: ${currentLength}`;
            });


        </script>

        <% } %>

            <div id="posts">

        </div>
    </main>
</section>





<div class="mapBanner">
    <a href="https://www.google.com/maps?ll=58.349455,26.714113&amp;z=15&amp;t=m&amp;hl=en-US&amp;gl=EG&amp;mapclient=embed&amp;q=Kopli+1+50115+Tartu+Estonia" target="_blank" class="mapBanner_col" style="background-image: url('https://liikumine.voco.ee/wp-content/uploads/sites/11/2023/01/map_1.jpg')">
        Kopli 1
    </a>
    <a href="https://www.google.com/maps/place/P%C3%B5llu+11,+50303+Tartu,+Estonia/@58.3994611,26.7119631,17.25z/data=!4m13!1m7!3m6!1s0x46eb36f49f59f7b1:0xc60a936ef314737f!2sP%C3%B5llu+11,+50303+Tartu,+Estonia" target="_blank" class="mapBanner_col" style="background-image: url('https://liikumine.voco.ee/wp-content/uploads/sites/11/2023/01/map_2.jpg')">
        Põllu 11
    </a>
</div>

<footer class="footer">
    <div class="container container-footer">
        <div class="footer_content">
            <div class="footer_logoCol">
                <a href="https://liikumine.voco.ee/" class="footer_logo">
                    <img src="https://liikumine.voco.ee/wp-content/uploads/sites/11/2023/01/VOCO.svg"
                         alt="VOCO Liikumine" class="footer_logoImg">
                </a>
            </div>
            <div class="footer_mainCol">
                <div class="footer_grid">
                    <div class="footer_col">
                        <h3 class="footer_title">
                            Kontakt
                        </h3>
                        <div class="footer_text">
                            <p><a href="mailto:info@voco.ee">info@voco.ee</a></p>
                            <p>7 361 810</p>

                        </div>
                    </div>
                    <div class="footer_col">
                        <h3 class="footer_title">
                            VOCO
                        </h3>
                        <div class="footer_text">
                            <p>Kopli 1</p>
                            <p>Tartu 50115 Eesti</p>

                        </div>
                    </div>
                    <div class="footer_col">
                        <h3 class="footer_title">
                            Privaatsustingimused
                        </h3>
                        <div class="footer_text">
                            <p><a href="#">Andmekaitse</a></p>
                            <p><a href="#">Küpsised</a></p>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="footer_bottom">
        © Tartu rakenduslik kolledž 2024
    </div>
</footer>

</body>
<script>
    // checkLogin.js

    document.addEventListener("DOMContentLoaded", function () {
        const siseneButton = document.getElementById('siseneButton');

        // Check if the user is logged in by making a request to the server
        fetch('/test')
            .then(response => response.json())
            .then(data => {
                const isLoggedIn = data.session && data.session.user !== undefined && data.session.user !== null;

                // Update the button text based on the user's login status
                siseneButton.innerText = isLoggedIn ? 'Välju' : 'Sisene';

                // Add a click event listener to the button
                siseneButton.addEventListener('click', function () {
                    if (isLoggedIn) {
                        // If logged in, make a request to the server to log out
                        fetch('/logout')
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    // If logout successful, reload the page to reflect the changes
                                    location.reload();
                                    // delete all sessionStorage
                                    sessionStorage.clear();
                                } else {
                                    console.error('Error logging out:', data.message);
                                }
                            })
                            .catch(error => console.error('Error logging out:', error));
                    } else {
                        // Handle the logic for navigating to the login page or any other actions
                        // Redirect to the login page, for example:
                        sessionStorage.clear();
                        window.location.href = '/sisene';
                    }
                });
            })
            .catch(error => console.error('Error checking login status:', error));
    });

</script>

<% if (userRole === 1 || userRole === 2 || userRole === 3) { %>

    <script>
        const myToggleButton = document.querySelector('#toggle-button');
        const myTargetElement = document.querySelector('#createPost');

        let isHidden = false;

        myToggleButton.onclick = function() {
            myTargetElement.classList.toggle('hidden');
            if (isHidden) {
                myToggleButton.innerHTML = '<i class="fa-regular fa-eye fa-lg"></i>';
            } else {
                myToggleButton.innerHTML = '<i class="fa-regular fa-eye-slash fa-lg"></i>';
            }
            isHidden = !isHidden;
        };


    </script>

    <script>
        // Listen for form submission
        document.getElementById('createPostForm').addEventListener('submit', function(event) {
            event.preventDefault(); // Prevent default form submission

            // Get form data
            const formData = {
                postTitle: document.getElementById('postTitle').value,
                postContent: document.getElementById('postContent').value,
                email: sessionStorage.getItem('email'),
                userId: sessionStorage.getItem('userId'),
                sessionToken: sessionStorage.getItem('sessionToken')
            };

            // Send data to the server
            fetch('/submit-post', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            })
                .then(response => {
                    if (!response.ok) {
                    }
                    return response.json();
                })
                .then(data => {
                    // Handle response from server
                    if (data.success) {
                        alert('Postitus edukalt lisatud!')
                        // Reload the page if submission was successful
                        location.reload();
                    } else {
                        // Display error message
                        const errorMessage = data.message;
                        document.getElementById('postTitleError').innerText = errorMessage;
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        });
    </script>

<% } %>

<script>
    document.addEventListener("DOMContentLoaded", function() {
        // Function to show skeleton loaders for posts
        function showPostSkeletonLoader() {
            const postsContainer = document.getElementById('posts');
            postsContainer.innerHTML = ''; // Clear existing content

            // Create skeleton elements for posts
            for (let i = 0; i < 4; i++) {
                const postSkeleton = document.createElement('div');
                postSkeleton.classList.add('post-skeleton');

                const titleSkeleton = document.createElement('div');
                titleSkeleton.classList.add('title-skeleton');

                const contentSkeleton = document.createElement('div');
                contentSkeleton.classList.add('content-skeleton');

                postSkeleton.appendChild(titleSkeleton);
                postSkeleton.appendChild(contentSkeleton);

                postsContainer.appendChild(postSkeleton);
            }
        }

        // Call function to show skeleton loaders for posts
        showPostSkeletonLoader();

        fetch('/get-posts')
            .then(response => response.json())
            .then(posts => {
                const postsContainer = document.getElementById('posts');
                postsContainer.innerHTML = ''; // Clear skeleton loaders

                // Sort posts by comment count in descending order
                posts.sort((a, b) => b.commentCount - a.commentCount);

                posts.forEach(post => {
                    const postTime = new Date(post.postDate);
                    const currentTime = new Date();
                    const timeDifference = Math.abs(currentTime - postTime);
                    const postUrl = post.url;
                    const postDate = new Date(post.postDate);

                    let timeAgo;
                    if (timeDifference < 1000 * 60 * 60) {
                        const minutesDifference = Math.ceil(timeDifference / (1000 * 60));
                        timeAgo = minutesDifference > 1 ? `${minutesDifference} minutit tagasi` : '1 minut tagasi';
                    } else if (timeDifference < 1000 * 60 * 60 * 24) {
                        const hoursDifference = Math.ceil(timeDifference / (1000 * 60 * 60));
                        timeAgo = hoursDifference > 1 ? `${hoursDifference} tundi tagasi` : '1 tund tagasi';
                    } else if (timeDifference < 1000 * 60 * 60 * 24 * 30) {
                        const daysDifference = Math.ceil(timeDifference / (1000 * 60 * 60 * 24));
                        timeAgo = daysDifference > 1 ? `${daysDifference} päeva tagasi` : '1 päev tagasi';
                    } else if (timeDifference < 1000 * 60 * 60 * 24 * 30 * 12) {
                        const monthsDifference = Math.ceil(timeDifference / (1000 * 60 * 60 * 24 * 30));
                        timeAgo = monthsDifference > 1 ? `${monthsDifference} kuud tagasi` : '1 kuu tagasi';
                    } else {
                        const yearsDifference = Math.ceil(timeDifference / (1000 * 60 * 60 * 24 * 30 * 12));
                        timeAgo = yearsDifference > 1 ? `${yearsDifference} aastat tagasi` : '1 aaasta tagasi';
                    }

                    const postElement = document.createElement('div');
                    postElement.classList.add('post');
                    postElement.innerHTML = `
                        <h2>${post.postTitle}</h2>
                        <div class="hold-data">
                            <p>Author: ${post.userName}</p>
                            <p>●</p>
                            <p class="post-date" data-date="${postDate.toISOString()}">${timeAgo}</p>
                        </div>
                        <p>${post.postContent}</p>
                        <div class="hold-buttons">
                            <p class="comment"><i class="fa-regular fa-message fa-xm"></i>${post.commentCount} kommentaari</p>
                            <a href="foorum${postUrl}" class="open-comments"><i class="fa-solid fa-up-right-from-square fa-xm"></i></a>
                        </div>
                    `;
                    postsContainer.appendChild(postElement);
                });
            })
            .catch(error => console.error('Error fetching posts:', error));
    });
</script>


<% if (userRole === 1 || userRole === 2 || userRole === 3) { %>

    <script>
        document.addEventListener("DOMContentLoaded", function() {
            const userId = sessionStorage.getItem('userId');
            const email = sessionStorage.getItem('email');
            const sessionToken = sessionStorage.getItem('sessionToken');

            if (!userId || !email || !sessionToken) {
                console.error('Invalid session data');
                return;
            }

            const requestData = {
                userId: userId,
                email: email,
                sessionToken: sessionToken
            };

            // Fetch user posts
            fetch('/get-user-posts', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestData)
            })
                .then(response => response.json())
                .then(userPosts => {
                    const yourPostsContainer = document.querySelector('.your-posts');

                    // Create an Intl.DateTimeFormat object for Estonian locale
                    const dateFormatter = new Intl.DateTimeFormat('et-EE', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                    });

                    userPosts.forEach(post => {
                        const postLink = document.createElement('a');
                        postLink.href = post.url;

                        // Format the date to Estonian
                        const formattedDate = dateFormatter.format(new Date(post.date));

                        const dateSpan = document.createElement('span'); // Creating a span for the formatted date
                        dateSpan.textContent = "  ● (" + formattedDate + ")";

                        postLink.textContent = post.title ;
                        postLink.classList.add('post-link');
                        postLink.appendChild(dateSpan);
                        yourPostsContainer.appendChild(postLink);
                    });

                })
                .catch(error => console.error('Error fetching user posts:', error));

            // Fetch user comments
            fetch('/get-user-comments', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestData)
            })
                .then(response => response.json())
                .then(userComments => {
                    const yourCommentsContainer = document.querySelector('.your-comments');

                    // Create an Intl.DateTimeFormat object for Estonian locale
                    const dateFormatter = new Intl.DateTimeFormat('et-EE', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                    });

                    userComments.forEach(comment => {
                        const commentLink = document.createElement('a');
                        commentLink.href = comment.url;

                        // Format the date to Estonian
                        const formattedDate = dateFormatter.format(new Date(comment.date));

                        const dateSpan = document.createElement('span'); // Creating a span for the formatted date
                        dateSpan.textContent = "  ● (" + formattedDate + ")";

                        commentLink.textContent = comment.title;
                        commentLink.classList.add('comment-link');
                        commentLink.appendChild(dateSpan);
                        yourCommentsContainer.appendChild(commentLink);
                    });
                })
                .catch(error => console.error('Error fetching user comments:', error));
        });

    </script>

<% } %>

<script>
    function handleSortingChange() {
        const selectedValue = document.getElementById('sortingDropdown').value;

        switch (selectedValue) {
            case 'popularity':
                orderPostsByPopularity();
                break;
            case 'leastPopularity':
                orderPostsByLeastPopularity();
                break;
            case 'newest':
                orderPostsByNewest();
                break;
            case 'oldest':
                orderPostsByOldest();
                break;
            default:
                console.error('Invalid sorting option selected.');
                break;
        }
    }

    function orderPostsByPopularity() {
        const posts = Array.from(document.querySelectorAll('.post'));
        const postsContainer = document.getElementById('posts');

        posts.sort((a, b) => {
            const commentsA = parseInt(a.querySelector('.comment').innerText);
            const commentsB = parseInt(b.querySelector('.comment').innerText);
            return commentsB - commentsA;
        });

        posts.forEach(post => postsContainer.appendChild(post));

        // Update dropdown menu to reflect the current sorting
        document.getElementById('sortingDropdown').value = 'popularity';
    }

    function orderPostsByLeastPopularity() {
        const posts = Array.from(document.querySelectorAll('.post'));
        const postsContainer = document.getElementById('posts');

        posts.sort((a, b) => {
            const commentsA = parseInt(a.querySelector('.comment').innerText);
            const commentsB = parseInt(b.querySelector('.comment').innerText);
            return commentsA - commentsB;
        });

        posts.forEach(post => postsContainer.appendChild(post));

        // Update dropdown menu to reflect the current sorting
        document.getElementById('sortingDropdown').value = 'leastPopularity';
    }
    function orderPostsByNewest() {
        const posts = Array.from(document.querySelectorAll('.post'));
        const postsContainer = document.getElementById('posts');

        posts.sort((a, b) => {
            const postDateA = a.querySelector('.post-date').getAttribute('data-date');
            const postDateB = b.querySelector('.post-date').getAttribute('data-date');
            return postDateB.localeCompare(postDateA); // Compare as strings
        });

        posts.forEach(post => postsContainer.appendChild(post));

        // Update dropdown menu to reflect the current sorting
        document.getElementById('sortingDropdown').value = 'newest';
    }

    function orderPostsByOldest() {
        const posts = Array.from(document.querySelectorAll('.post'));
        const postsContainer = document.getElementById('posts');

        posts.sort((a, b) => {
            const postDateA = a.querySelector('.post-date').getAttribute('data-date');
            const postDateB = b.querySelector('.post-date').getAttribute('data-date');
            return postDateA.localeCompare(postDateB); // Compare as strings
        });

        posts.forEach(post => postsContainer.appendChild(post));

        // Update dropdown menu to reflect the current sorting
        document.getElementById('sortingDropdown').value = 'oldest';
    }


</script>
<script>

    function searchPosts() {
        const searchInput = document.querySelector('.filter-search input').value.trim().toLowerCase();
        const postTitles = document.querySelectorAll('.post h2');
        const postAuthors = document.querySelectorAll('.post .hold-data p:first-child');
        const postDates = document.querySelectorAll('.post .hold-data p:last-child');
        const postMainContents = document.querySelectorAll('.post > p:not(.hold-data p)'); // Adjusted selector to target main content <p>

        postTitles.forEach((postTitle, index) => {
            const postContent = postMainContents[index].textContent.toLowerCase().trim();
            const postAuthor = postAuthors[index].textContent.toLowerCase().trim();

            if (postTitle.textContent.toLowerCase().includes(searchInput) ||
                postContent.includes(searchInput) ||
                postAuthor.includes(searchInput) ||
                postDates[index].textContent.toLowerCase().includes(searchInput)) {
                postTitle.closest('.post').style.display = '';
            } else {
                postTitle.closest('.post').style.display = 'none';
            }
        });
    }


    function deleteInput() {
        document.querySelector('.filter-search input').value = '';
        searchPosts(); // Call searchPosts to update display after clearing input
    }

    document.querySelector('.filter-search input').addEventListener('input', searchPosts);


</script>



</html>

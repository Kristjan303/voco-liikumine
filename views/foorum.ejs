<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="../css/index.css">
    <link rel="stylesheet" href="../css/foorum.css">
    <title>Foorum ✒ | VOCO Liikumine</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css">
</head>
<body>
<header>
    <div class="header-links">
        <a href="https://www.facebook.com/tartuvoco/">
            <i class="fa-brands fa-square-facebook fa-xl" style="color: #000000;"></i>
        </a>
        <a href="https://www.tiktok.com/@tartuvoco?lang=en">
            <i class="fa-brands fa-tiktok fa-xl" style="color: #000000;"></i>
        </a>
        <a href="https://www.instagram.com/tartuvoco/?hl=en">
            <i class="fa-brands fa-instagram fa-xl" style="color: #000000;"></i>
        </a>
    </div>
    <div class="header-search">
        <input type="text" placeholder="Otsi postituste seast...">
        <button type="submit">
            <i class="fa-solid fa-search fa-lg" style="color: #000000;"></i>
        </button>
        <a id="siseneButton" class="sisene" href="/sisene">Sisene</a>
    </div>
</header>
<nav>
    <a href="/" class="nav-logo">
        <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
             viewBox="0 0 412.74 334.7" style="enable-background:new 0 0 412.74 334.7;" xml:space="preserve">
          <style type="text/css">
              .st0{fill:#FFFFFF;}
          </style>
            <path class="st0" d="M259.98,112.52c0,27.49-22.29,49.78-49.78,49.78c-27.49,0-49.78-22.29-49.78-49.78
              c0-27.49,22.29-49.78,49.78-49.78C237.69,62.74,259.98,85.02,259.98,112.52 M350.92,223.78c0-27.49-22.29-49.78-49.78-49.78
              s-49.78,22.29-49.78,49.78c0,27.49,22.29,49.78,49.78,49.78S350.92,251.27,350.92,223.78 M214.48,223.92l35.27-35.27
              c-9.01-9.05-21.49-14.65-35.27-14.65c-27.49,0-49.78,22.29-49.78,49.78s22.29,49.78,49.78,49.78c13.71,0,26.13-5.54,35.13-14.51
              L214.48,223.92z M60.31,67.73l52.2,90.51l52.2-90.51H60.31z"/>
        </svg>
    </a>
    <div class="nav-links">
        <a href="artiklid">Artiklid</a>
        <a href="uudised">Uudised</a>
        <a style="color: #2980b9" href="foorum">Foorum</a>
        <a href="treeningud">Treeningud</a>
        <a href="galerii">Galerii</a>
    </div>
</nav>

<section class="foorum">
    <div class="section-nav">
        <div class="path">
            <p><a href="/">Avaleht</a> > <span>Foorum</span></p>
        </div>
        <h1>Foorum</h1>

        <section class="hold-filter">
            <button class="order-btn" id="orderButton" onclick="toggleOrder()">Vähem populaarsed <i class="fa-solid fa-arrow-down fa-sm"></i> </button>
            <select id="yearDropdown">
                <option value="" selected>Vali aasta</option>
            </select>
        </section>
    </div>



    <div class="search-forum">
    </div>

    <button id="toggle-button"><i class="fa-regular fa-eye fa-lg"></i></button>

    <main class="forum-content">
        <div id="createPost" >
            <form id="createPostForm">
                <h2>Loo postitus</h2>
                <div class="form-group-title">
                    <label for="postTitle">Pealkiri</label>
                    <input type="text" id="postTitle" name="postTitle" required>
                </div>
                <div class="form-group-content">
                    <label for="postContent">Sisu</label>
                    <textarea id="postContent" name="postContent" required></textarea>
                </div>

                <div class="error-message" id="postTitleError"></div>

                <button type="submit" id="createPostButton">Loo postitus</button>
            </form>
            <div class="your-posts">
                <h2>Minu postitused</h2>
            </div>
            <div class="your-comments">
                <h2>Minu komentaarid</h2>
            </div>
        </div>
        <div id="posts">

        </div>
    </main>
</section>


<script>
    const myToggleButton = document.querySelector('#toggle-button');
    const myTargetElement = document.querySelector('#createPost');

    let isHidden = false;

    myToggleButton.onclick = function() {
        myTargetElement.classList.toggle('hidden');
        if (isHidden) {
            myToggleButton.innerHTML = '<i class="fa-regular fa-eye fa-lg"></i>';
        } else {
            myToggleButton.innerHTML = '<i class="fa-regular fa-eye-slash fa-lg"></i>';
        }
        isHidden = !isHidden;
    };


</script>


<div class="mapBanner">
    <a href="https://www.google.com/maps?ll=58.349455,26.714113&amp;z=15&amp;t=m&amp;hl=en-US&amp;gl=EG&amp;mapclient=embed&amp;q=Kopli+1+50115+Tartu+Estonia" target="_blank" class="mapBanner_col" style="background-image: url('https://liikumine.voco.ee/wp-content/uploads/sites/11/2023/01/map_1.jpg')">
        Kopli 1
    </a>
    <a href="https://www.google.com/maps/place/P%C3%B5llu+11,+50303+Tartu,+Estonia/@58.3994611,26.7119631,17.25z/data=!4m13!1m7!3m6!1s0x46eb36f49f59f7b1:0xc60a936ef314737f!2sP%C3%B5llu+11,+50303+Tartu,+Estonia" target="_blank" class="mapBanner_col" style="background-image: url('https://liikumine.voco.ee/wp-content/uploads/sites/11/2023/01/map_2.jpg')">
        Põllu 11
    </a>
</div>

<footer class="footer">
    <div class="container container-footer">
        <div class="footer_content">
            <div class="footer_logoCol">
                <a href="https://liikumine.voco.ee/" class="footer_logo">
                    <img src="https://liikumine.voco.ee/wp-content/uploads/sites/11/2023/01/VOCO.svg"
                         alt="VOCO Liikumine" class="footer_logoImg">
                </a>
            </div>
            <div class="footer_mainCol">
                <div class="footer_grid">
                    <div class="footer_col">
                        <h3 class="footer_title">
                            Kontakt
                        </h3>
                        <div class="footer_text">
                            <p><a href="mailto:info@voco.ee">info@voco.ee</a></p>
                            <p>7 361 810</p>

                        </div>
                    </div>
                    <div class="footer_col">
                        <h3 class="footer_title">
                            VOCO
                        </h3>
                        <div class="footer_text">
                            <p>Kopli 1</p>
                            <p>Tartu 50115 Eesti</p>

                        </div>
                    </div>
                    <div class="footer_col">
                        <h3 class="footer_title">
                            Privaatsustingimused
                        </h3>
                        <div class="footer_text">
                            <p><a href="#">Andmekaitse</a></p>
                            <p><a href="#">Küpsised</a></p>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="footer_bottom">
        © Tartu rakenduslik kolledž 2024
    </div>
</footer>

</body>
<script>
    // checkLogin.js

    document.addEventListener("DOMContentLoaded", function () {
        const siseneButton = document.getElementById('siseneButton');

        // Check if the user is logged in by making a request to the server
        fetch('/test')
            .then(response => response.json())
            .then(data => {
                const isLoggedIn = data.session && data.session.user !== undefined && data.session.user !== null;

                // Update the button text based on the user's login status
                siseneButton.innerText = isLoggedIn ? 'Välju' : 'Sisene';

                // Add a click event listener to the button
                siseneButton.addEventListener('click', function () {
                    if (isLoggedIn) {
                        // If logged in, make a request to the server to log out
                        fetch('/logout')
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    // If logout successful, reload the page to reflect the changes
                                    location.reload();
                                } else {
                                    console.error('Error logging out:', data.message);
                                }
                            })
                            .catch(error => console.error('Error logging out:', error));
                    } else {
                        // Handle the logic for navigating to the login page or any other actions
                        // Redirect to the login page, for example:
                        localStorage.clear();
                        window.location.href = '/sisene';
                    }
                });
            })
            .catch(error => console.error('Error checking login status:', error));
    });

</script>

<script>
    // Listen for form submission
    document.getElementById('createPostForm').addEventListener('submit', function(event) {
        event.preventDefault(); // Prevent default form submission

        // Get form data
        const formData = {
            postTitle: document.getElementById('postTitle').value,
            postContent: document.getElementById('postContent').value,
            email: sessionStorage.getItem('email'),
            userId: sessionStorage.getItem('userId'),
            sessionToken: sessionStorage.getItem('sessionToken')
        };

        // Send data to the server
        fetch('/submit-post', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        })
            .then(response => {
                if (!response.ok) {
                }
                return response.json();
            })
            .then(data => {
                // Handle response from server
                if (data.success) {
                    // Reload the page if submission was successful
                    location.reload();
                } else {
                    // Display error message
                    const errorMessage = data.message;
                    document.getElementById('postTitleError').innerText = errorMessage;
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
    });
</script>


<script>
    document.addEventListener("DOMContentLoaded", function() {
        fetch('/get-posts')
            .then(response => response.json())
            .then(posts => {
                // Sort posts by comment count in descending order
                posts.sort((a, b) => b.commentCount - a.commentCount);

                const postsContainer = document.getElementById('posts');
                posts.forEach(post => {
                    const postTime = new Date(post.postDate);
                    const currentTime = new Date();
                    const timeDifference = Math.abs(currentTime - postTime);
                    const postUrl = post.url;

                    let timeAgo;
                    if (timeDifference < 1000 * 60 * 60) {
                        const minutesDifference = Math.ceil(timeDifference / (1000 * 60));
                        timeAgo = minutesDifference > 1 ? `${minutesDifference} minutit tagasi` : '1 minut tagasi';
                    } else if (timeDifference < 1000 * 60 * 60 * 24) {
                        const hoursDifference = Math.ceil(timeDifference / (1000 * 60 * 60));
                        timeAgo = hoursDifference > 1 ? `${hoursDifference} tundi tagasi` : '1 tund tagasi';
                    } else if (timeDifference < 1000 * 60 * 60 * 24 * 30) {
                        const daysDifference = Math.ceil(timeDifference / (1000 * 60 * 60 * 24));
                        timeAgo = daysDifference > 1 ? `${daysDifference} päeva tagasi` : '1 päev tagasi';
                    } else if (timeDifference < 1000 * 60 * 60 * 24 * 30 * 12) {
                        const monthsDifference = Math.ceil(timeDifference / (1000 * 60 * 60 * 24 * 30));
                        timeAgo = monthsDifference > 1 ? `${monthsDifference} kuud tagasi` : '1 kuu tagasi';
                    } else {
                        const yearsDifference = Math.ceil(timeDifference / (1000 * 60 * 60 * 24 * 30 * 12));
                        timeAgo = yearsDifference > 1 ? `${yearsDifference} aastat tagasi` : '1 aaasta tagasi';
                    }

                    const postElement = document.createElement('div');
                    postElement.classList.add('post');
                    postElement.innerHTML = `
                    <h2>${post.postTitle}</h2>
                    <div class="hold-data">
                        <p>Author: ${post.userName}</p>
                        <p>●</p>
                        <p>${timeAgo}</p>
                    </div>
                    <p>${post.postContent}</p>
                    <div class="hold-buttons">
                        <p class="comment"><i class="fa-regular fa-message fa-xm"></i>${post.commentCount} kommentaari</p>
                        <a href="foorum${postUrl}" class="open-comments"><i class="fa-solid fa-up-right-from-square fa-xm"></i></a>
                    `;
                    postsContainer.appendChild(postElement);
                });
            })
            .catch(error => console.error('Error fetching posts:', error));
    });

</script>
<script>
    document.addEventListener("DOMContentLoaded", function() {
        const userId = sessionStorage.getItem('userId');
        const email = sessionStorage.getItem('email');
        const sessionToken = sessionStorage.getItem('sessionToken');

        if (!userId || !email || !sessionToken) {
            console.error('Invalid session data');
            return;
        }

        const requestData = {
            userId: userId,
            email: email,
            sessionToken: sessionToken
        };

        // Fetch user posts
        fetch('/get-user-posts', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestData)
        })
            .then(response => response.json())
            .then(userPosts => {
                const yourPostsContainer = document.querySelector('.your-posts');

                // Create an Intl.DateTimeFormat object for Estonian locale
                const dateFormatter = new Intl.DateTimeFormat('et-EE', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });

                userPosts.forEach(post => {
                    const postLink = document.createElement('a');
                    postLink.href = post.url;

                    // Format the date to Estonian
                    const formattedDate = dateFormatter.format(new Date(post.date));

                    postLink.textContent = post.title + " ●" + " (" + formattedDate + ")"; // Displaying formatted date behind each link
                    postLink.classList.add('post-link');
                    yourPostsContainer.appendChild(postLink);
                    yourPostsContainer.appendChild(document.createElement('br')); // Adding line break
                });
            })
            .catch(error => console.error('Error fetching user posts:', error));

        // Fetch user comments
        fetch('/get-user-comments', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestData)
        })
            .then(response => response.json())
            .then(userComments => {
                const yourCommentsContainer = document.querySelector('.your-comments');

                // Create an Intl.DateTimeFormat object for Estonian locale
                const dateFormatter = new Intl.DateTimeFormat('et-EE', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });

                userComments.forEach(comment => {
                    const commentLink = document.createElement('a');
                    commentLink.href = comment.url;

                    // Format the date to Estonian
                    const formattedDate = dateFormatter.format(new Date(comment.date));

                    commentLink.textContent = comment.title + " ●" + " (" + formattedDate + ")"; // Displaying formatted date behind each link
                    commentLink.classList.add('comment-link');
                    yourCommentsContainer.appendChild(commentLink);
                    yourCommentsContainer.appendChild(document.createElement('br')); // Adding line break
                });
            })
            .catch(error => console.error('Error fetching user comments:', error));
    });

</script>

<script>
    let isOldest = true;

    function toggleOrder() {
        if (isOldest) {
            orderPostsByPopularity();
            document.getElementById('orderButton').innerHTML = 'Populaarseimad <i class="fa-solid fa-arrow-up fa-sm"></i>';
        } else {
            orderPostsByLeastPopularity();
            document.getElementById('orderButton').innerHTML = 'Vähem populaarsed <i class="fa-solid fa-arrow-down fa-sm"></i>';
        }
        isOldest = !isOldest;
    }

    function orderPostsByPopularity() {
        const posts = Array.from(document.querySelectorAll('.post'));
        const postsContainer = document.getElementById('posts');

        posts.sort((a, b) => a.querySelector('.comment').innerText.split(' ')[0] - b.querySelector('.comment').innerText.split(' ')[0]);

        posts.forEach(post => postsContainer.appendChild(post));

        if (document.getElementById('orderButton').innerText = 'Vähem populaarsed') {
            document.getElementById('orderButton').innerText = 'Populaarseimad';
        } else {
            document.getElementById('orderButton').innerText = 'Vähem populaarsed';
        }
    }

    function orderPostsByLeastPopularity() {
        const posts = Array.from(document.querySelectorAll('.post'));
        const postsContainer = document.getElementById('posts');

        posts.sort((a, b) => b.querySelector('.comment').innerText.split(' ')[0] - a.querySelector('.comment').innerText.split(' ')[0]);

        posts.forEach(post => postsContainer.appendChild(post));

        if (document.getElementById('orderButton').innerText = 'Populaarseimad') {
            document.getElementById('orderButton').innerText = 'Vähem populaarsed';
        } else {
            document.getElementById('orderButton').innerText = 'Populaarseimad';
        }
    }
</script>
<script>
    function populateYearDropdown() {
        const yearDropdown = document.getElementById('yearDropdown');
        const postDates = Array.from(document.querySelectorAll('.post')).map(post => post.querySelector('.postDate').textContent);
        const years = [...new Set(postDates.map(date => new Date(date).getFullYear()))]; // Extract unique years

        yearDropdown.innerHTML = '<option value="" selected>Vali aasta</option>'; // Reset dropdown

        years.forEach(year => {
            const option = document.createElement('option');
            option.value = year;
            option.textContent = year;
            yearDropdown.appendChild(option);
        });
    }

    function filterPostsByYear() {
        const selectedYear = document.getElementById('yearDropdown').value;

        const posts = document.querySelectorAll('.post');

        posts.forEach(post => {
            const postDateElement = post.querySelector('.postDate');
            if (selectedYear === "" || (postDateElement && new Date(postDateElement.textContent).getFullYear().toString() === selectedYear)) {
                post.style.display = '';
            } else {
                post.style.display = 'none';
            }
        });
    }

    document.getElementById('yearDropdown').addEventListener('change', filterPostsByYear);

    document.addEventListener("DOMContentLoaded", function() {
        populateYearDropdown();
        filterPostsByYear(); // Filter initially based on default selection
    });
</script>


</html>

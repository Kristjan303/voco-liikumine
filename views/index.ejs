<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="../css/index.css">
    <link rel="stylesheet" href="../css/foorum.css">
    <link rel="stylesheet" href="../css/skeletonIndex.css">
    <title>Avaleht | VOCO Liikumine</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css">
    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.10/index.global.min.js'></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var calendarEl = document.getElementById('calendar');
            var calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'timeGridWeek',
                editable: false,
                height: 700,
                allDaySlot: false,
                eventClassNames: 'trenni-hover',
                firstDay: 1,
                slotMinTime: "08:00:00",
                slotMaxTime: "21:30:00",
                slotDuration: "00:15:00",
                slotLabelFormat: {
                    hour: 'numeric',
                    minute: '2-digit',
                    omitZeroMinute: false
                },
                aspectRatio: 0.5,
                contentHeight: 500,
                expandRows: true,
                handleWindowResize: true,
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'timeGridWeek,timeGridDay'
                },
                eventClick: function(info) {
                    info.jsEvent.preventDefault(); // don't let the browser navigate
                    if (info.event.extendedProps.description) {
                        // redirect to /treeningud
                        window.location.href = `/treeningud`;
                    }
                },
                // rewrite the inner html of buttons to Estonian
                buttonText: {
                    today: 'Täna',
                    month: 'Kuu',
                    week: 'Nädal',
                    day: 'Päev',
                    list: 'Nimekiri'
                },
                // render description and location in the event
                eventContent: function(arg) {
                    return { html: `<b>${arg.timeText}</b> <br/> ${arg.event.title} <br> <i style="position: absolute; bottom: 0; ">${arg.event.extendedProps.location}</i>` };
                },

            });

            calendar.setOption('locale', 'et');

            // Fetch data from the endpoint
            fetch('/fetch-trennid', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => response.json())
                .then(data => {
                    data.forEach(event => {
                        // Convert days to numbers
                        const days = event.trenni_toimumise_päev.split(',');
                        const daysInNumbers = days.map(day => {
                            switch(day.trim()) {
                                case 'Monday':
                                    return 1;
                                case 'Tuesday':
                                    return 2;
                                case 'Wednesday':
                                    return 3;
                                case 'Thursday':
                                    return 4;
                                case 'Friday':
                                    return 5;
                                case 'Saturday':
                                    return 6;
                                case 'Sunday':
                                    return 0;
                                default:
                                    return -1; // Invalid day
                            }
                        });
                        // Create FullCalendar events
                        daysInNumbers.forEach(day => {
                            calendar.addEvent({
                                title: event.trenni_nimi,
                                daysOfWeek: [day],
                                startTime: event.trenni_toimumise_algusaeg,
                                endTime: event.trenni_toimumise_lõppaeg,
                                color: event.trenni_värv,
                                description: event.trenni_selgitus,
                                location: event.asukoht,
                                location2: event.trenni_klass,
                                startRecur: event.trenni_lisamise_kuupäev,

                            });
                        });
                    });
                    calendar.render();
                })
                .catch(error => console.error('Error fetching data:', error));
        });
    </script>
</head>
<body>
<header>
    <div class="header-links">
        <a href="https://www.facebook.com/tartuvoco/">
            <i class="fa-brands fa-square-facebook fa-xl" style="color: #000000;"></i>
        </a>
        <a href="https://www.tiktok.com/@tartuvoco?lang=en">
            <i class="fa-brands fa-tiktok fa-xl" style="color: #000000;"></i>
        </a>
        <a href="https://www.instagram.com/tartuvoco/?hl=en">
            <i class="fa-brands fa-instagram fa-xl" style="color: #000000;"></i>
        </a>
    </div>
    <div class="header-search">
        <input type="text" id="searchInput" placeholder="Otsi...">
        <button type="button" id="searchButton">
            <i class="fa-solid fa-search fa-lg" style="color: #000000;"></i>
        </button>
        <a id="siseneButton" class="sisene" href="/sisene">Sisene</a>
    </div>
    <script>
        document.getElementById("searchButton").addEventListener("click", function () {
            sendData();
        });

        document.getElementById("searchInput").addEventListener("keydown", function (event) {
            if (event.key === "Enter") {
                sendData();
            }
        });

        function sendData() {
            var userInput = document.getElementById("searchInput").value.trim();
            if (userInput.length > 3) {
                sendDataToServer(userInput);
            } else {
                alert("Please enter at least 4 characters before searching.");
            }
        }

        function sendDataToServer(input) {
            var xhr = new XMLHttpRequest();
            xhr.open("POST", "/search", true);
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        var response = JSON.parse(xhr.responseText);
                        if (response.success) {
                            var url = response.url;
                            var data = response.data; // Extract the data from the response
                            window.location.href = `${url}?data=${JSON.stringify(data)}`; // Pass data as query parameter
                        } else {
                            alert("Search failed. Please try again later.");
                        }
                    } else {
                        alert("Error: " + xhr.statusText);
                    }
                }
            };
            var data = JSON.stringify({ query: input });
            xhr.send(data);
        }
    </script>

</header>
<nav>
    <a href="/" class="nav-logo">
        <img style="height: 80px" src="/logos/voco-logo-04-3.png">
    </a>
    <div class="nav-links">
        <a href="artiklid">Artiklid</a>
        <a href="uudised">Uudised</a>
        <a href="foorum">Foorum</a>
        <a href="treeningud">Treeningud</a>
        <a href="galerii">Galerii</a>
        <a href="kontakt">Kontakt</a>

    </div>
</nav>

<section class="highlights">
    <div class="items">
        <a href="/galerii">
            <div class="item active">
                <img src="">
            </div>
        </a>
        <a href="/galerii">
            <div class="item next">
                <img src="">
            </div>
        </a>
        <a href="/galerii">
            <div class="item">
                <img src="">
            </div>
        </a>
        <a href="/galerii">
            <div class="item">
                <img src="">
            </div>
        </a>
        <a href="/galerii">
            <div class="item">
                <img src="">
            </div>
        </a>
        <a href="/galerii">
            <div class="item">
                <img src="">
            </div>
        </a>
        <a href="/galerii">
            <div class="item">
                <img src="">
            </div>
        </a>
        <a href="/galerii">
            <div class="item">
                <img src="">
            </div>
        </a>
        <a href="/galerii">
            <div class="item prev">
                <img src="">
            </div>
        </a>
        <a href="/galerii">
            <div class="item">
                <img src="">
            </div>
        </a>
        <div class="button-container">
            <div class="button"><i class="fas fa-angle-left"></i></div>
            <div class="button"><i class="fas fa-angle-right"></i></div>
        </div>
    </div>
</section>



<section class="hot">
    <div class="hotHold">
        <div class="hotContainer">
            <section class="hotNews">
                <div class="hold-title">
                    <h2>Uudised</h2>
                    <a href="uudised">Vaata kõiki</a>
                </div>
                <main>

                </main>
            </section>
            <section class="hotArticles">
                <div class="hold-title">
                    <h2>Uusimad artiklid</h2>
                    <a href="artiklid">Vaata kõiki</a>
                </div>
                <main>

                </main>
            </section>
        </div>
        <div class="hotPosts">
            <h2>Kuumimad postitused</h2>
            <main id="posts"></main>

        </div>
    </div>
</section>
<section class="calendar-section">
    <div class="calendar-container">
        <h2>Toimuvad trennid:</h2>
        <section class="hold-calendar">
            <div id="calendar"></div>
        </section>
    </div>
</section>



<script>
    // Function to show skeleton loaders while data is being fetched
    function showSkeletonLoader(containerSelector) {
        const container = document.querySelector(containerSelector);
        container.innerHTML = ''; // Clear existing content

        // Create skeleton elements
        for (let i = 0; i < 4; i++) { // Assuming 4 skeleton elements for each section
            const cardElement = document.createElement('div');
            cardElement.classList.add('card');

            const coverImageSkeleton = document.createElement('div');
            coverImageSkeleton.classList.add('cover-image-skeleton');

            const skeletonLoader1 = document.createElement('div');
            skeletonLoader1.classList.add('skeleton-loader');

            const skeletonLoader2 = document.createElement('div');
            skeletonLoader2.classList.add('skeleton-loader');

            const skeletonLoader3 = document.createElement('div');
            skeletonLoader3.classList.add('skeleton-loader');

            cardElement.appendChild(coverImageSkeleton);
            cardElement.appendChild(skeletonLoader1);
            cardElement.appendChild(skeletonLoader2);
            cardElement.appendChild(skeletonLoader3);

            container.appendChild(cardElement);
        }
    }

    // Function to fetch news articles from the server
    function fetchNews() {
        showSkeletonLoader('.hotNews main'); // Show skeleton loader for news section

        fetch('/get-news')
            .then(response => response.json())
            .then(news => {
                const newsContainer = document.querySelector('.hotNews main');
                newsContainer.innerHTML = ''; // Clear existing news

                const maxNewsToShow = 4;
                const newsToShow = news.slice(0, maxNewsToShow);

                newsToShow.forEach(article => {
                    const articleElement = document.createElement('div');
                    articleElement.classList.add('news-preview');
                    articleElement.style.paddingTop = '0';
                    const banner = getBanner(article.summernoteContent); // Get the first image as banner
                    if (banner) {
                        articleElement.innerHTML = `
                        <figure class="news-banner">
                            <img src="${banner}" alt="Banner">
                        </figure>
                        <p class="news-author">Autor: ${article.newsAuthor}</p>
                        <p class="news-date">${article.newsDate}</p>
                        <h2>${article.newsHeader}</h2>
                        <a href="${article.url}">Loe rohkem →</a>
                    `;
                    } else {
                        articleElement.innerHTML = `
                        <p class="news-author">Autor: ${article.newsAuthor}</p>
                        <p class="news-date">${article.newsDate}</p>
                        <h2>${article.newsHeader}</h2>
                        <div>${article.summernoteContent}</div>
                        <a href="${article.url}">Loe rohkem →</a>
                    `;
                    }
                    newsContainer.appendChild(articleElement);
                });
            })
            .catch(error => {
                console.error('Error fetching news:', error);
                // Handle errors here
            });
    }

    // Function to fetch articles from the server
    function fetchArticles() {
        showSkeletonLoader('.hotArticles main'); // Show skeleton loader for articles section

        fetch('/get-articles')
            .then(response => response.json())
            .then(data => {
                const articlesContainer = document.querySelector('.hotArticles main');
                articlesContainer.innerHTML = ''; // Clear existing articles

                const maxArticlesToShow = 4;
                const articlesToShow = data.slice(0, maxArticlesToShow);

                articlesToShow.forEach(article => {
                    const articleDiv = document.createElement('div');
                    articleDiv.classList.add('article-preview');
                    articleDiv.style.paddingTop = '0';
                    const banner = getBanner(article.summernoteContent); // Get the first image as banner
                    if (banner) {
                        articleDiv.innerHTML = `
                        <figure class="article-banner">
                            <img src="${banner}" alt="Banner">
                        </figure>
                        <p class="article-author">Autor: ${article.articleAuthor}</p>
                        <p class="article-date">${article.articleDate}</p>
                        <h2>${article.articleHeader}</h2>
                        <a href="${article.url}">Loe rohkem →</a>
                    `;
                    } else {
                        articleDiv.innerHTML = `
                        <p class="article-author">Autor: ${article.articleAuthor}</p>
                        <p class="article-date">${article.articleDate}</p>
                        <h2>${article.articleHeader}</h2>
                        <div>${article.summernoteContent}</div>
                        <a href="${article.url}">Loe rohkem →</a>
                    `;
                    }
                    articlesContainer.appendChild(articleDiv);
                });
            })
            .catch(error => {
                console.error('Error fetching articles:', error);
                // Handle errors here
            });
    }

    // Function to get the first image from HTML content
    function getBanner(htmlContent) {
        const tempElement = document.createElement('div');
        tempElement.innerHTML = htmlContent;
        const imgElement = tempElement.querySelector('img');
        if (imgElement) {
            return imgElement.src;
        }
        return null;
    }

    // Call fetchNews and fetchArticles functions when the page loads
    window.onload = function () {
        fetchNews();
        fetchArticles();
    };

</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Function to show skeleton loaders while posts are being fetched
        function showPostSkeletonLoader() {
            const postsContainer = document.getElementById('posts');
            postsContainer.innerHTML = ''; // Clear existing content

            // Create skeleton elements
            for (let i = 0; i < 4; i++) { // Assuming 4 skeleton elements for posts
                const postElement = document.createElement('div');
                postElement.classList.add('post-skeleton');

                const titleSkeleton1 = document.createElement('div');
                titleSkeleton1.classList.add('title-skeleton');
                const titleSkeleton2 = document.createElement('div');
                titleSkeleton2.classList.add('title-skeleton');

                const contentSkeleton = document.createElement('div');
                contentSkeleton.classList.add('content-skeleton');


                postElement.appendChild(titleSkeleton1);
                postElement.appendChild(titleSkeleton2);
                postElement.appendChild(contentSkeleton);
                postsContainer.appendChild(postElement);
            }
        }

        showPostSkeletonLoader(); // Show skeleton loader for posts

        fetch('/get-posts')
            .then(response => response.json())
            .then(posts => {
                // Sort posts by comment count in descending order
                posts.sort((a, b) => b.commentCount - a.commentCount);

                const postsContainer = document.getElementById('posts');
                postsContainer.innerHTML = ''; // Clear skeleton loaders

                posts.slice(0, 4).forEach(post => {
                    const postTime = new Date(post.postDate);
                    const currentTime = new Date();
                    const timeDifference = Math.abs(currentTime - postTime);
                    const postUrl = encodeURIComponent(post.url);
                    const postDate = new Date(post.postDate);

                    let timeAgo;
                    if (timeDifference < 1000 * 60 * 60) {
                        const minutesDifference = Math.ceil(timeDifference / (1000 * 60));
                        timeAgo = minutesDifference > 1 ? `${minutesDifference} minutit tagasi` : '1 minut tagasi';
                    } else if (timeDifference < 1000 * 60 * 60 * 24) {
                        const hoursDifference = Math.ceil(timeDifference / (1000 * 60 * 60));
                        timeAgo = hoursDifference > 1 ? `${hoursDifference} tundi tagasi` : '1 tund tagasi';
                    } else if (timeDifference < 1000 * 60 * 60 * 24 * 30) {
                        const daysDifference = Math.ceil(timeDifference / (1000 * 60 * 60 * 24));
                        timeAgo = daysDifference > 1 ? `${daysDifference} päeva tagasi` : '1 päev tagasi';
                    } else if (timeDifference < 1000 * 60 * 60 * 24 * 30 * 12) {
                        const monthsDifference = Math.ceil(timeDifference / (1000 * 60 * 60 * 24 * 30));
                        timeAgo = monthsDifference > 1 ? `${monthsDifference} kuud tagasi` : '1 kuu tagasi';
                    } else {
                        const yearsDifference = Math.ceil(timeDifference / (1000 * 60 * 60 * 24 * 30 * 12));
                        timeAgo = yearsDifference > 1 ? `${yearsDifference} aastat tagasi` : '1 aaasta tagasi';
                    }

                    const postElement = document.createElement('div');
                    postElement.classList.add('post');
                    postElement.style.width = '300px';
                    postElement.style.maxHeight = '330px';
                    postElement.innerHTML = `
                            <h2>${post.postTitle}</h2>
                            <div class="hold-data">
                                <p>Author: ${post.userName}</p>
                                <p>●</p>
                                <p class="post-date" data-date="${postDate.toISOString()}">${timeAgo}</p>
                            </div>
                            <p>${post.postContent}</p>
                            <div class="hold-buttons">
                                <p class="comment"><i class="fa-regular fa-message fa-xm"></i>${post.commentCount} kommentaari</p>
<a href="/foorum${post.url}" class="open-comments"><i class="fa-solid fa-up-right-from-square fa-xm"></i></a>
                            </div>
                        `;
                    postsContainer.appendChild(postElement);
                });
            })
            .catch(error => console.error('Error fetching posts:', error));
    });
</script>
<script>
    const slider = document.querySelector(".items");
    const slides = document.querySelectorAll(".item");
    const buttons = document.querySelectorAll(".button");
    let current = 0;
    let prev = slides.length - 1;
    let next = 1;
    let timer;

    for (let i = 0; i < buttons.length; i++) {
        buttons[i].addEventListener("click", () => {
            resetTimer();
            i == 0 ? gotoPrev() : gotoNext();
        });
    }

    async function fetchImages() {
        try {
            const response = await fetch('/galerii/latest-images');
            if (!response.ok) {
                throw new Error('Failed to fetch latest images');
            }
            const data = await response.json();
            const images = data.latestImages.slice(0, 10);

            images.forEach((image, index) => {
                if (index < slides.length) {
                    const img = slides[index].querySelector('img');
                    img.src = image;
                }
            });
        } catch (error) {
            console.error('Error:', error.message);
        }
    }

    fetchImages();

    const gotoPrev = () => current > 0 ? gotoNum(current - 1) : gotoNum(slides.length - 1);

    const gotoNext = () => current < slides.length - 1 ? gotoNum(current + 1) : gotoNum(0);

    const gotoNum = number => {
        current = number;
        prev = current - 1;
        next = current + 1;

        if (next == slides.length) {
            next = 0;
        }

        if (prev == -1) {
            prev = slides.length - 1;
        }

        slides.forEach(slide => {
            slide.classList.remove("active", "prev", "next");
        });

        slides[current].classList.add("active");
        slides[prev].classList.add("prev");
        slides[next].classList.add("next");
    };

    const resetTimer = () => {
        clearInterval(timer);
        timer = setInterval(gotoNext, 5000);
    };

    // Auto-advance slider every 5 seconds
    timer = setInterval(gotoNext, 5000);
</script>








<div class="mapBanner">
    <a href="https://www.google.com/maps?ll=58.349455,26.714113&amp;z=15&amp;t=m&amp;hl=en-US&amp;gl=EG&amp;mapclient=embed&amp;q=Kopli+1+50115+Tartu+Estonia" target="_blank" class="mapBanner_col" style="background-image: url('https://liikumine.voco.ee/wp-content/uploads/sites/11/2023/01/map_1.jpg')">
        Kopli 1
    </a>
    <a href="https://www.google.com/maps/place/P%C3%B5llu+11,+50303+Tartu,+Estonia/@58.3994611,26.7119631,17.25z/data=!4m13!1m7!3m6!1s0x46eb36f49f59f7b1:0xc60a936ef314737f!2sP%C3%B5llu+11,+50303+Tartu,+Estonia" target="_blank" class="mapBanner_col" style="background-image: url('https://liikumine.voco.ee/wp-content/uploads/sites/11/2023/01/map_2.jpg')">
        Põllu 11
    </a>
</div>

<footer class="footer">
    <div class="container container-footer">
        <div class="footer_content">
            <div class="footer_logoCol">
                <a href="https://liikumine.voco.ee/" class="footer_logo">
                    <img src="https://liikumine.voco.ee/wp-content/uploads/sites/11/2023/01/VOCO.svg"
                         alt="VOCO Liikumine" class="footer_logoImg">
                </a>
            </div>
            <div class="footer_mainCol">
                <div class="footer_grid">
                    <div class="footer_col">
                        <h3 class="footer_title">
                            Kontakt
                        </h3>
                        <div class="footer_text">
                            <p><a href="mailto:info@voco.ee">info@voco.ee</a></p>
                            <p>7 361 810</p>

                        </div>
                    </div>
                    <div class="footer_col">
                        <h3 class="footer_title">
                            VOCO
                        </h3>
                        <div class="footer_text">
                            <p>Kopli 1</p>
                            <p>Tartu 50115 Eesti</p>

                        </div>
                    </div>
                    <div class="footer_col">
                        <h3 class="footer_title">
                            Privaatsustingimused
                        </h3>
                        <div class="footer_text">
                            <p><a href="#">Andmekaitse</a></p>
                            <p><a href="#">Küpsised</a></p>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="footer_bottom">
        © Tartu rakenduslik kolledž 2024
    </div>
</footer>

</body>

<script>
    // checkLogin.js

    document.addEventListener("DOMContentLoaded", function () {
        const siseneButton = document.getElementById('siseneButton');

        // Check if the user is logged in by making a request to the server
        fetch('/test')
            .then(response => response.json())
            .then(data => {
                const isLoggedIn = data.session && data.session.user !== undefined && data.session.user !== null;

                // Update the button text based on the user's login status
                siseneButton.innerText = isLoggedIn ? 'Välju' : 'Sisene';

                // Add a click event listener to the button
                siseneButton.addEventListener('click', function () {
                    if (isLoggedIn) {
                        // If logged in, make a request to the server to log out
                        fetch('/logout')
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    // If logout successful, reload the page to reflect the changes
                                    location.reload();
                                    // delete all sessionStorage
                                    sessionStorage.clear();
                                } else {
                                    console.error('Error logging out:', data.message);
                                }
                            })
                            .catch(error => console.error('Error logging out:', error));
                    } else {
                        // Handle the logic for navigating to the login page or any other actions
                        // Redirect to the login page, for example:
                        sessionStorage.clear();
                        window.location.href = '/sisene';
                    }
                });
            })
            .catch(error => console.error('Error checking login status:', error));
    });

</script>

</html>
